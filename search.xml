<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分布式doubbo、springcloud初体验</title>
      <link href="/2019/09/26/SpringBoot%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F-doubbo-springcloud/"/>
      <url>/2019/09/26/SpringBoot%E4%B8%8E%E5%88%86%E5%B8%83%E5%BC%8F-doubbo-springcloud/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 分布式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> doubbo、springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 项目监控</title>
      <link href="/2019/09/26/SpringBoot-%E9%A1%B9%E7%9B%AE%E7%9B%91%E6%8E%A7/"/>
      <url>/2019/09/26/SpringBoot-%E9%A1%B9%E7%9B%AE%E7%9B%91%E6%8E%A7/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 项目监控 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot监控actuator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 热部署</title>
      <link href="/2019/09/25/SpringBoot-%E7%83%AD%E9%83%A8%E7%BD%B2/"/>
      <url>/2019/09/25/SpringBoot-%E7%83%AD%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="一、SpringBoot热部署（快速开发）"><a href="#一、SpringBoot热部署（快速开发）" class="headerlink" title="一、SpringBoot热部署（快速开发）"></a>一、SpringBoot热部署（快速开发）</h1><p>在开发中我们修改一个Java文件后想看到效果不得不重启应用，这导致大量时间花费，我们希望不重启应用的情况下，程序可以自动部署（热部署）。有以下四种情况，如何能实现热部署。</p><p>1、模板引擎<br>在Spring Boot中开发情况下禁用模板引擎的cache<br>页面模板改变ctrl+F9可以重新编译当前页面并生效</p><p>2、Spring Loaded<br>Spring官方提供的热部署程序，实现修改类文件的热部署<br>下载Spring Loaded（项目地址<a href="https://github.com/spring-projects/spring-loaded）" target="_blank" rel="noopener">https://github.com/spring-projects/spring-loaded）</a><br>添加运行时参数；<br>-javaagent:C:/springloaded-1.2.5.RELEASE.jar –noverify</p><p>3、JRebel<br>收费的一个热部署软件<br>安装插件使用即可</p><p>4、<strong>Spring Boot Devtools</strong><code>（推荐）</code><br>引入依赖</p><pre><code class="xml">&lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;   &lt;/dependency&gt; </code></pre><p><code>IDEA使用ctrl+F9</code><br>或做一些小调整<br>    Intellij IEDA和Eclipse不同，Eclipse设置了自动编译之后，修改类它会自动编译，而IDEA在非RUN或DEBUG情况下才会自动编译（前提是你已经设置了Auto-Compile）。<br>设置自动编译（settings-compiler-make project automatically）<br>ctrl+shift+alt+/（maintenance）<br>勾选compiler.automake.allow.when.app.running</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot热部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot安全控制(SpringSecurity)</title>
      <link href="/2019/09/25/SpringBoot%E5%AE%89%E5%85%A8%E6%8E%A7%E5%88%B6-SpringSecurity/"/>
      <url>/2019/09/25/SpringBoot%E5%AE%89%E5%85%A8%E6%8E%A7%E5%88%B6-SpringSecurity/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring安全Security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot任务(异步、定时、邮件)</title>
      <link href="/2019/09/25/SpringBoot%E4%BB%BB%E5%8A%A1-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6/"/>
      <url>/2019/09/25/SpringBoot%E4%BB%BB%E5%8A%A1-%E5%BC%82%E6%AD%A5%E3%80%81%E5%AE%9A%E6%97%B6%E3%80%81%E9%82%AE%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 异步任务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot任务异步、定时、邮件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot检索(Elasticsearch)基础</title>
      <link href="/2019/09/25/SpringBoot%E4%B8%8E%E6%A3%80%E7%B4%A2-Elasticsearch-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/09/25/SpringBoot%E4%B8%8E%E6%A3%80%E7%B4%A2-Elasticsearch-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot与检索（ElasticSearch）"><a href="#Spring-Boot与检索（ElasticSearch）" class="headerlink" title="Spring Boot与检索（ElasticSearch）"></a>Spring Boot与检索（ElasticSearch）</h1><h1 id="一、-检索概述ElasticSearch"><a href="#一、-检索概述ElasticSearch" class="headerlink" title="一、 检索概述ElasticSearch"></a>一、 检索概述ElasticSearch</h1><p>我们的应用经常需要添加检索功能，开源的 ElasticSearch 是目前全文搜索引擎的首选。他可以快速的存储、搜索和分析海量数据。Spring Boot通过整合Spring Data ElasticSearch为我们提供了非常便捷的检索功能支持；</p><p>Elasticsearch是一个分布式搜索服务，提供<code>Restful API</code>，底层基于<code>Lucene</code>，采用多shard（分片）的方式保证数据安全，并且提供自动resharding的功能，github等大型的站点也是采用了ElasticSearch作为其搜索服务。</p><h1 id="二、ElasticSearch中的概念"><a href="#二、ElasticSearch中的概念" class="headerlink" title="二、ElasticSearch中的概念"></a>二、ElasticSearch中的概念</h1><ul><li>以 <code>员工文档</code> 的形式存储为例：一个<code>文档</code>代表一个员工数据。存储数据到 ElasticSearch 的行为叫做 <code>索引</code> ，但在索引一个文档之前，需要确定将文档存储在哪里。</li><li>一个 ElasticSearch 集群可以 包含多个 <code>索引</code> ，相应的每个索引可以包含多个 <code>类型</code> 。 这些不同的类型存储着多个 <code>文档</code> ，每个文档又有 多个 <code>属性</code> 。</li><li><strong>类似关系mysql</strong>：</li></ul><p><strong>索引-数据库<br>类型-表<br>文档-表中的记录<br>属性-列</strong><br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569517333361.png" alt="关系图"></p><p><strong>RestAPI操作ES</strong><br>PUT：添加,修改   /索引/类型/文档id<br>GET：获取   /索引/类型/文档id<br>HEAD: 查看是否存在<br>DELETE：删除  /索引/类型/文档id</p><p>注释： 1.特殊用法_search ？lastname=<strong>*   含义：查询所有并且name=*</strong><br>            2.还可以利用<code>查询表达式</code>来定义查询<br>            <code>查询表达式很重要，后续会更新相关语法。</code></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569519657541.png" alt="例子"></p><h1 id="三、SpringBoot整合ElasticSearch案例"><a href="#三、SpringBoot整合ElasticSearch案例" class="headerlink" title="三、SpringBoot整合ElasticSearch案例"></a>三、SpringBoot整合ElasticSearch案例</h1><h2 id="1-Docker安装ElasticSearch"><a href="#1-Docker安装ElasticSearch" class="headerlink" title="1. Docker安装ElasticSearch"></a>1. Docker安装ElasticSearch</h2><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569517982232.png" alt="安装命令"><br>注：注意设置堆内存的大小，默认2G</p><p>浏览器测试验证：<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569518148598.png" alt="验证"></p><h2 id="2-引入依赖jar包"><a href="#2-引入依赖jar包" class="headerlink" title="2. 引入依赖jar包"></a>2. 引入依赖jar包</h2><blockquote><p>SpringBoot默认支持两种技术来和ES交互；<br>  1、Jest（默认不生效）<br>      需要导入jest的工具包（io.searchbox.client.JestClient）<br>  2、SpringData ElasticSearch【ES版本有可能不合适】<br>          版本适配说明：<a href="https://github.com/spring-projects/spring-data-elasticsearch" target="_blank" rel="noopener">https://github.com/spring-projects/spring-data-elasticsearch</a><br>         如果版本不适配：2.4.6<br>             1）、升级SpringBoot版本<br>             2）、安装对应版本的ES<br>          3、Client 节点信息clusterNodes；clusterName<br>          4、ElasticsearchTemplate 操作es<br>         5、编写一个 ElasticsearchRepository 的子接口来操作ES；<br>     两种用法：<a href="https://github.com/spring-projects/spring-data-elasticsearch" target="_blank" rel="noopener">https://github.com/spring-projects/spring-data-elasticsearch</a><br>     6、编写一个 ElasticsearchRepository</p></blockquote><pre><code class="xml">        &lt;!--SpringBoot默认使用SpringData ElasticSearch模块进行操作--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;!-- https://mvnrepository.com/artifact/io.searchbox/jest --&gt;        &lt;dependency&gt;            &lt;groupId&gt;io.searchbox&lt;/groupId&gt;            &lt;artifactId&gt;jest&lt;/artifactId&gt;            &lt;version&gt;5.3.3&lt;/version&gt;        &lt;/dependency&gt;</code></pre><h2 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a>3. 配置文件</h2><pre><code class="propertis">#二选一，上面是jest方式，下面是springDate的方式spring.elasticsearch.jest.uris=http://118.24.44.169:9200spring.data.elasticsearch.cluster-name=elasticsearchspring.data.elasticsearch.cluster-nodes=118.24.44.169:9301</code></pre><h2 id="4-SpringBoot整合ElasticSearch案例"><a href="#4-SpringBoot整合ElasticSearch案例" class="headerlink" title="4.SpringBoot整合ElasticSearch案例"></a>4.SpringBoot整合ElasticSearch案例</h2><h3 id="1-jest方式"><a href="#1-jest方式" class="headerlink" title="1. jest方式"></a>1. jest方式</h3><h4 id="1-保存索引"><a href="#1-保存索引" class="headerlink" title="1. 保存索引"></a>1. 保存索引</h4><pre><code class="java">    public void contextLoads() {        //1、给Es中索引（保存）一个文档；        Article article = new Article();        article.setId(1);        article.setTitle(&quot;好消息&quot;);        article.setAuthor(&quot;zhangsan&quot;);        article.setContent(&quot;Hello World&quot;);        //构建一个索引功能        Index index = new Index.Builder(article).index(&quot;atguigu&quot;).type(&quot;news&quot;).build();        try {            //执行            jestClient.execute(index);        } catch (IOException e) {            e.printStackTrace();        }    }</code></pre><p>注意：PO类里面要生命主键ID<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569519090533.png" alt="JestID注解"></p><h4 id="2-搜索"><a href="#2-搜索" class="headerlink" title="2.搜索"></a>2.搜索</h4><pre><code class="java">public void search(){        //查询表达式        String json =&quot;{\n&quot; +                &quot;    \&quot;query\&quot; : {\n&quot; +                &quot;        \&quot;match\&quot; : {\n&quot; +                &quot;            \&quot;content\&quot; : \&quot;hello\&quot;\n&quot; +                &quot;        }\n&quot; +                &quot;    }\n&quot; +                &quot;}&quot;;        //更多操作：https://github.com/searchbox-io/Jest/tree/master/jest        //构建搜索功能        Search search = new Search.Builder(json).addIndex(&quot;atguigu&quot;).addType(&quot;news&quot;).build();        //执行        try {            SearchResult result = jestClient.execute(search);            System.out.println(result.getJsonString());        } catch (IOException e) {            e.printStackTrace();        }    }</code></pre><h3 id="1-SpringDate-BookRepository方式"><a href="#1-SpringDate-BookRepository方式" class="headerlink" title="1. SpringDate BookRepository方式"></a>1. SpringDate BookRepository方式</h3><h4 id="1-查询"><a href="#1-查询" class="headerlink" title="1.查询"></a>1.查询</h4><p>  1.先订制repository类<br>  2.再查询</p><pre><code class="java">public interface BookRepository extends ElasticsearchRepository&lt;Book,Integer&gt; {    //参照    // https://docs.spring.io/spring-data/elasticsearch/docs/3.0.6.RELEASE/reference/html/   public List&lt;Book&gt; findByBookNameLike(String bookName);}</code></pre><pre><code class="java">    public void test02(){//        Book book = new Book();//        book.setId(1);//        book.setBookName(&quot;西游记&quot;);//        book.setAuthor(&quot;吴承恩&quot;);//        bookRepository.index(book);        for (Book book : bookRepository.findByBookNameLike(&quot;游&quot;)) {            System.out.println(book);        }        ;    }</code></pre><p>注意：用此方式添加的PO类是需要用@Document来注释声明索引和类型值</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569520098188.png" alt="注解Document"></p>]]></content>
      
      
      <categories>
          
          <category> 检索 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch和SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与消息队列</title>
      <link href="/2019/09/25/SpringBoot%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
      <url>/2019/09/25/SpringBoot%E4%B8%8E%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot与消息-JMS-AMQP-RabbitMQ"><a href="#Spring-Boot与消息-JMS-AMQP-RabbitMQ" class="headerlink" title="Spring Boot与消息 JMS/AMQP/RabbitMQ"></a>Spring Boot与消息 JMS/AMQP/RabbitMQ</h1><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>1.大多应用中，可通过消息服务中间件来提升系统异步通信、扩展解耦能力<br>2.消息服务中两个重要概念：<br>       <code>消息代理（message broker）</code> 和 <code>目的地（destination）</code><br>3.当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。<br>消息队列主要有两种形式的目的地</p><ul><li><code>队列（queue）</code>：点对点消息通信（point-to-point）</li><li><code>主题（topic）</code>：发布（publish）/订阅（subscribe）消息通信</li></ul><h2 id="1-名词解释"><a href="#1-名词解释" class="headerlink" title="1.名词解释"></a>1.名词解释</h2><p>1.<strong>点对点式</strong>：<br>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获取消息内容，消息读取后被移出队列<br>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者<br>2.<strong>发布订阅式</strong>：<br>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个主题，那么就会在消息到达时同时收到消息<br>3.<strong>JMS（Java Message Service）JAVA消息服务</strong>：<br>基于JVM消息代理的规范。<code>ActiveMQ</code>、HornetMQ是JMS实现<br>4.<strong>AMQP（Advanced Message Queuing Protocol）</strong><br>高级消息队列协议，也是一个消息代理的规范，兼容JMS<br><code>RabbitMQ</code>是AMQP的实现</p><h3 id="1-JMS-和-AMQP区别"><a href="#1-JMS-和-AMQP区别" class="headerlink" title="1.JMS 和 AMQP区别"></a>1.JMS 和 AMQP区别</h3><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569510939749.png" alt="JMS 和 AMQP区别"></p><h2 id="2-同步、多线程、异步区别"><a href="#2-同步、多线程、异步区别" class="headerlink" title="2.同步、多线程、异步区别"></a>2.同步、多线程、异步区别</h2><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569510188475.png" alt="传统同步"><br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569510207844.png" alt="多线程快一倍"><br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569510235206.png" alt="异步快两倍"></p><h2 id="3-消息队列应用场景"><a href="#3-消息队列应用场景" class="headerlink" title="3.消息队列应用场景"></a>3.消息队列应用场景</h2><p>1.应用解耦<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569510334374.png" alt="解耦前"><br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569510348945.png" alt="解耦后"><br>2.流量消峰<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569510379712.png" alt="流量消峰"></p><h2 id="4-Spring支持消息注解及自动配置"><a href="#4-Spring支持消息注解及自动配置" class="headerlink" title="4.Spring支持消息注解及自动配置"></a>4.Spring支持消息注解及自动配置</h2><p>1.@EnableJms、@EnableRabbit开启支持<br>2.spring-jms提供了对JMS的支持<br>3.spring-rabbit提供了对AMQP的支持<br>4.需要ConnectionFactory的实现来连接消息代理<br>5.提供JmsTemplate、RabbitTemplate来发送消息<br>6.@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息代理发布的消息</p><p><strong>自动配置类</strong></p><ul><li>JmsAutoConfiguration</li><li>RabbitAutoConfiguration</li></ul><h1 id="二、RabbitMQ简介"><a href="#二、RabbitMQ简介" class="headerlink" title="二、RabbitMQ简介"></a>二、RabbitMQ简介</h1><h2 id="1-RabbitMQ简介："><a href="#1-RabbitMQ简介：" class="headerlink" title="1.RabbitMQ简介："></a>1.RabbitMQ简介：</h2><p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现。</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569511340437.png" alt="RabbitMQ组件概览图"></p><h2 id="2-核心概念"><a href="#2-核心概念" class="headerlink" title="2.核心概念"></a>2.核心概念</h2><p><strong>Message</strong><br>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。</p><p><strong>Publisher</strong><br>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p><p><strong>Exchange</strong><br>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。<br>Exchange有4种类型：direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别</p><p><strong>Queue</strong><br>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。</p><p><strong>Binding</strong><br>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。<br>Exchange 和Queue的绑定可以是多对多的关系。</p><p><strong>Connection</strong><br>网络连接，比如一个TCP连接。</p><p><strong>Channel</strong><br>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP 命令都是通过信道发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</p><p><strong>Consumer</strong><br>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p><p><strong>Virtual Host</strong><br>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时指定，RabbitMQ 默认的 vhost 是 / 。</p><p><strong>Broker</strong><br>表示消息队列服务器实体</p><h1 id="三、RabbitMQ运行机制"><a href="#三、RabbitMQ运行机制" class="headerlink" title="三、RabbitMQ运行机制"></a>三、RabbitMQ运行机制</h1><h2 id="1-AMQP-中的消息路由"><a href="#1-AMQP-中的消息路由" class="headerlink" title="1.AMQP 中的消息路由"></a>1.AMQP 中的消息路由</h2><p>AMQP 中消息的路由过程和 Java 开发者熟悉的 JMS 存在一些差别，AMQP 中增加了 <code>Exchange</code> 和 <code>Binding</code> 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569511515628.png" alt></p><h2 id="2-Exchange-类型"><a href="#2-Exchange-类型" class="headerlink" title="2.Exchange 类型"></a>2.Exchange 类型</h2><p>Exchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：<code>direct、fanout、topic、headers</code> 。headers 匹配 AMQP 消息的 header 而不是路由键， headers 交换器和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接看另外三种类型：</p><h3 id="1-direct-Exchange"><a href="#1-direct-Exchange" class="headerlink" title="1.direct Exchange"></a>1.direct Exchange</h3><p>消息中的路由键（routing key）如果和 Binding 中的 binding key 一致， 交换器就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”等等。它是完全匹配、单播的模式。</p><h3 id="2-fanout-Exchange"><a href="#2-fanout-Exchange" class="headerlink" title="2.fanout Exchange"></a>2.fanout Exchange</h3><p>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列绑定到交换器上，每个发送到交换器的消息都会被转发到与该交换器绑定的所有队列上。很像子网广播，每台子网内的主机都获得了一份复制的消息。fanout 类型转发消息是最快的。</p><h3 id="3-topic-Exchange"><a href="#3-topic-Exchange" class="headerlink" title="3. topic Exchange"></a>3. topic Exchange</h3><p>topic 交换器通过模式匹配分配消息的路由键属性，将路由键和某个模式进行匹配，此时队列需要绑定到一个模式上。它将路由键和绑定键的字符串切分成单词，这些单词之间用点隔开。它同样也会识别两个通配符：符号“#”和符号“*”。”#”匹配 0个或多个单词，”*”匹配一个单词。</p><h1 id="四、RabbitMQ和SpringBoot整合实例"><a href="#四、RabbitMQ和SpringBoot整合实例" class="headerlink" title="四、RabbitMQ和SpringBoot整合实例"></a>四、RabbitMQ和SpringBoot整合实例</h1><h3 id="1-docker安装RabbitMQ"><a href="#1-docker安装RabbitMQ" class="headerlink" title="1. docker安装RabbitMQ"></a>1. docker安装RabbitMQ</h3><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569513627539.png" alt="安装暴露端口"><br>登录后台界面：默认账号：guest 密码：guest<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569513741911.png" alt="后台界面"></p><h3 id="2-创建项目引入spring-boot-starter-amqp"><a href="#2-创建项目引入spring-boot-starter-amqp" class="headerlink" title="2. 创建项目引入spring-boot-starter-amqp"></a>2. 创建项目引入spring-boot-starter-amqp</h3><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-amqp&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><h3 id="3-配置application-yml-配置-队列的host、账号密码等"><a href="#3-配置application-yml-配置-队列的host、账号密码等" class="headerlink" title="3. 配置application.yml 配置 队列的host、账号密码等"></a>3. 配置application.yml 配置 队列的host、账号密码等</h3><pre><code class="propertis">spring.rabbitmq.host=118.24.44.169spring.rabbitmq.username=guestspring.rabbitmq.password=guest#spring.rabbitmq.virtual-host=</code></pre><h3 id="4-测试"><a href="#4-测试" class="headerlink" title="4. 测试"></a>4. 测试</h3><h4 id="1-发送消息RabbitTemplate"><a href="#1-发送消息RabbitTemplate" class="headerlink" title="1. 发送消息RabbitTemplate"></a>1. 发送消息RabbitTemplate</h4><pre><code class="java">    @Autowired    RabbitTemplate rabbitTemplate;        rabbitTemplate.convertAndSend(&quot;exchange.direct&quot;,&quot;atguigu.news&quot;,new Book(&quot;西游记&quot;,&quot;吴承恩&quot;));</code></pre><h4 id="2-监听消息"><a href="#2-监听消息" class="headerlink" title="2. 监听消息"></a>2. 监听消息</h4><p><strong>@EnableRabbit +  @RabbitListener 监听消息队列的内容</strong></p><pre><code class="java">    @RabbitListener(queues = &quot;atguigu.news&quot;)    public void receive(Book book){        System.out.println(&quot;收到消息：&quot;+book);    }    @RabbitListener(queues = &quot;atguigu&quot;)    public void receive02(Message message){        System.out.println(message.getBody());        System.out.println(message.getMessageProperties());    }</code></pre><h4 id="3-接收消息"><a href="#3-接收消息" class="headerlink" title="3. 接收消息"></a>3. 接收消息</h4><pre><code class="java">Object o = rabbitTemplate.receiveAndConvert(&quot;atguigu.news&quot;);</code></pre><h4 id="4-配置RabbitMQ-功能组件AmqpAdmin"><a href="#4-配置RabbitMQ-功能组件AmqpAdmin" class="headerlink" title="4. 配置RabbitMQ 功能组件AmqpAdmin"></a>4. 配置RabbitMQ 功能组件AmqpAdmin</h4><pre><code class="java">public void createExchange(){        amqpAdmin.declareExchange(new DirectExchange(&quot;amqpadmin.exchange&quot;));        System.out.println(&quot;创建完成&quot;);        amqpAdmin.declareQueue(new Queue(&quot;amqpadmin.queue&quot;,true));        //创建绑定规则        amqpAdmin.declareBinding(new Binding(&quot;amqpadmin.queue&quot;, Binding.DestinationType.QUEUE,&quot;amqpadmin.exchange&quot;,&quot;amqp.haha&quot;,null));        //amqpAdmin.de    }</code></pre><h4 id="5-配置json解析"><a href="#5-配置json解析" class="headerlink" title="5. 配置json解析"></a>5. 配置json解析</h4><p>SpringBoot默认使用的是自带的jdk解析</p><pre><code class="java">@Configurationpublic class MyAMQPConfig {    @Bean    public MessageConverter messageConverter(){        return new Jackson2JsonMessageConverter();    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 消息队列 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot与消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与缓存(原生缓存/Redis)</title>
      <link href="/2019/09/24/SpringBoot%E4%B8%8E%E7%BC%93%E5%AD%98-%E5%8E%9F%E7%94%9F%E7%BC%93%E5%AD%98-Redis/"/>
      <url>/2019/09/24/SpringBoot%E4%B8%8E%E7%BC%93%E5%AD%98-%E5%8E%9F%E7%94%9F%E7%BC%93%E5%AD%98-Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="一、JSR107缓存介绍"><a href="#一、JSR107缓存介绍" class="headerlink" title="一、JSR107缓存介绍"></a>一、JSR107缓存介绍</h1><p>层级关系如图所示：<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569378309733.png" alt="jsr107层级关系"></p><h1 id="二、Spring缓存抽象（JCache）"><a href="#二、Spring缓存抽象（JCache）" class="headerlink" title="二、Spring缓存抽象（JCache）"></a>二、Spring缓存抽象（JCache）</h1><p>Spring从3.1开始定义了org.springframework.cache.Cache<br>和org.springframework.cache.CacheManager接口来统一不同的缓存技术；<br>并支持使用JCache（JSR-107）注解简化我们开发；</p><ul><li><p>Cache接口为缓存的组件规范定义，包含缓存的各种操作集合；</p></li><li><p>Cache接口下Spring提供了各种xxxCache的实现；如RedisCache，EhCacheCache , ConcurrentMapCache等；</p></li><li><p>每次调用需要缓存功能的方法时，Spring会检查检查指定参数的指定的目标方法是否已经被调用过；如果有就直接从缓存中获取方法调用后的结果，如果没有就调用方法并缓存结果后返回给用户。下次调用直接从缓存中获取。</p></li><li><p>使用Spring缓存抽象时我们需要关注以下两点；<br>1、确定方法需要被缓存以及他们的缓存策略<br>2、从缓存中读取之前缓存存储的数据<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569378524115.png" alt="JCache关系图"></p></li></ul><h2 id="几个重要的概念-amp-缓存注解"><a href="#几个重要的概念-amp-缓存注解" class="headerlink" title="几个重要的概念&amp;缓存注解"></a>几个重要的概念&amp;缓存注解</h2><table><thead><tr><th>名称</th><th>描述</th></tr></thead><tbody><tr><td>Cache</td><td>缓存接口，定义缓存操作。实现有：RedisCache、EhCacheCache、ConcurrentMapCache等</td></tr><tr><td>CacheManager</td><td>缓存管理器，管理各种缓存（Cache）组件</td></tr><tr><td>@Cacheable</td><td>主要针对方法配置，能够根据方法的请求参数对其结果进行缓存</td></tr><tr><td>@CacheEvict</td><td>清空缓存</td></tr><tr><td>@CachePut</td><td>保证方法被调用，又希望结果被缓存。</td></tr><tr><td>@EnableCaching</td><td>开启基于注解的缓存</td></tr><tr><td>keyGenerator</td><td>缓存数据时key生成策略</td></tr><tr><td>serialize</td><td>缓存数据时value序列化策略</td></tr></tbody></table><h3 id="Cacheable-CachePut-CacheEvict-主要的参数"><a href="#Cacheable-CachePut-CacheEvict-主要的参数" class="headerlink" title="@Cacheable/@CachePut/@CacheEvict 主要的参数"></a>@Cacheable/@CachePut/@CacheEvict 主要的参数</h3><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569379310639.png" alt="参数以及描述"></p><h3 id="Cache-SpEL-available-metadata-参数列表"><a href="#Cache-SpEL-available-metadata-参数列表" class="headerlink" title="Cache SpEL available metadata 参数列表"></a>Cache SpEL available metadata 参数列表</h3><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569379488267.png" alt="SpEl参数列表"></p><h1 id="三、缓存使用"><a href="#三、缓存使用" class="headerlink" title="三、缓存使用"></a>三、缓存使用</h1><p>1、引入spring-boot-starter-cache模块<br>2、@EnableCaching开启缓存<br>3、使用缓存注解</p><h3 id="搭建及快速体验步骤"><a href="#搭建及快速体验步骤" class="headerlink" title="搭建及快速体验步骤"></a>搭建及快速体验步骤</h3><pre><code class="java">/** * 一、搭建基本环境 * 1、导入数据库文件 创建出department和employee表 * 2、创建javaBean封装数据 * 3、整合MyBatis操作数据库 *         1.配置数据源信息 *         2.使用注解版的MyBatis； *             1）、@MapperScan指定需要扫描的mapper接口所在的包 * 二、快速体验缓存 *         步骤： *             1、开启基于注解的缓存 @EnableCaching *             2、标注缓存注解即可 *                 @Cacheable *                 @CacheEvict *                 @CachePut * 默认使用的是ConcurrentMapCacheManager==ConcurrentMapCache；将数据保存在    ConcurrentMap&lt;Object, Object&gt;中 * 开发中使用缓存中间件；redis、memcached、ehcache； * /</code></pre><h3 id="原理及流程"><a href="#原理及流程" class="headerlink" title="原理及流程"></a>原理及流程</h3><pre><code class="java">@CacheConfig(cacheNames=&quot;emp&quot;/*,cacheManager = &quot;employeeCacheManager&quot;*/) //抽取缓存的公共配置@Servicepublic class EmployeeService {    @Autowired    EmployeeMapper employeeMapper;    /**     * 将方法的运行结果进行缓存；以后再要相同的数据，直接从缓存中获取，不用调用方法；     * CacheManager管理多个Cache组件的，对缓存的真正CRUD操作在Cache组件中，每一个缓存组件有自己唯一一个名字；     *     *     * 原理：     *   1、自动配置类；CacheAutoConfiguration     *   2、缓存的配置类     *   org.springframework.boot.autoconfigure.cache.GenericCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.JCacheCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.EhCacheCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.HazelcastCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.InfinispanCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.CouchbaseCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.RedisCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.CaffeineCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.GuavaCacheConfiguration     *   org.springframework.boot.autoconfigure.cache.SimpleCacheConfiguration【默认】     *   org.springframework.boot.autoconfigure.cache.NoOpCacheConfiguration     *   3、哪个配置类默认生效：SimpleCacheConfiguration；     *     *   4、给容器中注册了一个CacheManager：ConcurrentMapCacheManager     *   5、可以获取和创建ConcurrentMapCache类型的缓存组件；他的作用将数据保存在ConcurrentMap中；     *     *   运行流程：     *   @Cacheable：     *   1、方法运行之前，先去查询Cache（缓存组件），按照cacheNames指定的名字获取；     *      （CacheManager先获取相应的缓存），第一次获取缓存如果没有Cache组件会自动创建。     *   2、去Cache中查找缓存的内容，使用一个key，默认就是方法的参数；     *      key是按照某种策略生成的；默认是使用keyGenerator生成的，默认使用SimpleKeyGenerator生成key；     *          SimpleKeyGenerator生成key的默认策略；     *                  如果没有参数；key=new SimpleKey()；     *                  如果有一个参数：key=参数的值     *                  如果有多个参数：key=new SimpleKey(params)；     *   3、没有查到缓存就调用目标方法；     *   4、将目标方法返回的结果，放进缓存中     *     *   @Cacheable标注的方法执行之前先来检查缓存中有没有这个数据，默认按照参数的值作为key去查询缓存，     *   如果没有就运行方法并将结果放入缓存；以后再来调用就可以直接使用缓存中的数据；     *     *   核心：     *      1）、使用CacheManager【ConcurrentMapCacheManager】按照名字得到Cache【ConcurrentMapCache】组件     *      2）、key使用keyGenerator生成的，默认是SimpleKeyGenerator     *     *     *   几个属性：     *      cacheNames/value：指定缓存组件的名字;将方法的返回结果放在哪个缓存中，是数组的方式，可以指定多个缓存；     *     *      key：缓存数据使用的key；可以用它来指定。默认是使用方法参数的值  1-方法的返回值     *              编写SpEL； #i d;参数id的值   #a0  #p0  #root.args[0]     *              getEmp[2]     *     *      keyGenerator：key的生成器；可以自己指定key的生成器的组件id     *              key/keyGenerator：二选一使用;     *     *     *      cacheManager：指定缓存管理器；或者cacheResolver指定获取解析器     *     *      condition：指定符合条件的情况下才缓存；     *              ,condition = &quot;#id&gt;0&quot;     *          condition = &quot;#a0&gt;1&quot;：第一个参数的值》1的时候才进行缓存     *     *      unless:否定缓存；当unless指定的条件为true，方法的返回值就不会被缓存；可以获取到结果进行判断     *              unless = &quot;#result == null&quot;     *              unless = &quot;#a0==2&quot;:如果第一个参数的值是2，结果不缓存；     *      sync：是否使用异步模式     * @param id     * @return     *     */    @Cacheable(value = {&quot;emp&quot;}/*,keyGenerator = &quot;myKeyGenerator&quot;,condition = &quot;#a0&gt;1&quot;,unless = &quot;#a0==2&quot;*/)    public Employee getEmp(Integer id){        System.out.println(&quot;查询&quot;+id+&quot;号员工&quot;);        Employee emp = employeeMapper.getEmpById(id);        return emp;    }    /**     * @CachePut：既调用方法，又更新缓存数据；同步更新缓存     * 修改了数据库的某个数据，同时更新缓存；     * 运行时机：     *  1、先调用目标方法     *  2、将目标方法的结果缓存起来     *     * 测试步骤：     *  1、查询1号员工；查到的结果会放在缓存中；     *          key：1  value：lastName：张三     *  2、以后查询还是之前的结果     *  3、更新1号员工；【lastName:zhangsan；gender:0】     *          将方法的返回值也放进缓存了；     *          key：传入的employee对象  值：返回的employee对象；     *  4、查询1号员工？     *      应该是更新后的员工；     *          key = &quot;#employee.id&quot;:使用传入的参数的员工id；     *          key = &quot;#result.id&quot;：使用返回后的id     *             @Cacheable的key是不能用#result     *      为什么是没更新前的？【1号员工没有在缓存中更新】     *     */    @CachePut(/*value = &quot;emp&quot;,*/key = &quot;#result.id&quot;)    public Employee updateEmp(Employee employee){        System.out.println(&quot;updateEmp:&quot;+employee);        employeeMapper.updateEmp(employee);        return employee;    }    /**     * @CacheEvict：缓存清除     *  key：指定要清除的数据     *  allEntries = true：指定清除这个缓存中所有的数据     *  beforeInvocation = false：缓存的清除是否在方法之前执行     *      默认代表缓存清除操作是在方法执行之后执行;如果出现异常缓存就不会清除     *     *  beforeInvocation = true：     *      代表清除缓存操作是在方法运行之前执行，无论方法是否出现异常，缓存都清除     *     *     */    @CacheEvict(value=&quot;emp&quot;,beforeInvocation = true/*key = &quot;#id&quot;,*/)    public void deleteEmp(Integer id){        System.out.println(&quot;deleteEmp:&quot;+id);        //employeeMapper.deleteEmpById(id);        int i = 10/0;    }    // @Caching 定义复杂的缓存规则    @Caching(         cacheable = {             @Cacheable(/*value=&quot;emp&quot;,*/key = &quot;#lastName&quot;)         },         put = {             @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.id&quot;),             @CachePut(/*value=&quot;emp&quot;,*/key = &quot;#result.email&quot;)         }    )    public Employee getEmpByLastName(String lastName){        return employeeMapper.getEmpByLastName(lastName);    }}</code></pre><h3 id="自定义key生成策略"><a href="#自定义key生成策略" class="headerlink" title="自定义key生成策略"></a>自定义key生成策略</h3><pre><code class="javascript">@Configurationpublic class MyCacheConfig {    @Bean(&quot;myKeyGenerator&quot;)    public KeyGenerator keyGenerator(){        return new KeyGenerator(){            @Override            public Object generate(Object target, Method method, Object... params) {                return method.getName()+&quot;[&quot;+ Arrays.asList(params).toString()+&quot;]&quot;;            }        };    }}</code></pre><h1 id="四、使用Redis作为缓存"><a href="#四、使用Redis作为缓存" class="headerlink" title="四、使用Redis作为缓存"></a>四、使用Redis作为缓存</h1><h3 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h3><pre><code class="javascript">/** * 三、整合redis作为缓存 * Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 *     1、安装redis：使用docker； *     2、引入redis的starter *     3、配置redis *     4、测试缓存 *     /</code></pre><h4 id="redis-starter"><a href="#redis-starter" class="headerlink" title="redis-starter"></a>redis-starter</h4><pre><code class="xml">&lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h4 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h4><pre><code class="xml">spring.redis.host=118.24.44.169</code></pre><h3 id="Redis工作原理"><a href="#Redis工作原理" class="headerlink" title="Redis工作原理"></a>Redis工作原理</h3><pre><code class="java">/**  *     原理：CacheManager===Cache 缓存组件来实际给缓存中存取数据 *        1）、引入redis的starter，容器中保存的是 RedisCacheManager； *        2）、RedisCacheManager 帮我们创建 RedisCache 来作为缓存组件；RedisCache通过操作redis缓存数据的 *        3）、默认保存数据 k-v 都是Object；利用序列化保存；如何保存为json *               1、引入了redis的starter，cacheManager变为 RedisCacheManager； *               2、默认创建的 RedisCacheManager 操作redis的时候使用的是 RedisTemplate&lt;Object, Object&gt; *               3、RedisTemplate&lt;Object, Object&gt; 是 默认使用jdk的序列化机制 *      4）、自定义CacheManager； * */</code></pre><h4 id="自定义Redis序列化为json"><a href="#自定义Redis序列化为json" class="headerlink" title="自定义Redis序列化为json"></a>自定义Redis序列化为json</h4><pre><code class="java">@Configurationpublic class MyRedisConfig {    @Bean    public RedisTemplate&lt;Object, Employee&gt; empRedisTemplate(            RedisConnectionFactory redisConnectionFactory)            throws UnknownHostException {        RedisTemplate&lt;Object, Employee&gt; template = new RedisTemplate&lt;Object, Employee&gt;();        template.setConnectionFactory(redisConnectionFactory);        Jackson2JsonRedisSerializer&lt;Employee&gt; ser = new Jackson2JsonRedisSerializer&lt;Employee&gt;(Employee.class);        template.setDefaultSerializer(ser);        return template;    }    @Bean    public RedisTemplate&lt;Object, Department&gt; deptRedisTemplate(            RedisConnectionFactory redisConnectionFactory)            throws UnknownHostException {        RedisTemplate&lt;Object, Department&gt; template = new RedisTemplate&lt;Object, Department&gt;();        template.setConnectionFactory(redisConnectionFactory);        Jackson2JsonRedisSerializer&lt;Department&gt; ser = new Jackson2JsonRedisSerializer&lt;Department&gt;(Department.class);        template.setDefaultSerializer(ser);        return template;    }    //CacheManagerCustomizers可以来定制缓存的一些规则    @Primary  //将某个缓存管理器作为默认的    @Bean    public RedisCacheManager employeeCacheManager(RedisTemplate&lt;Object, Employee&gt; empRedisTemplate){        RedisCacheManager cacheManager = new RedisCacheManager(empRedisTemplate);        //key多了一个前缀        //使用前缀，默认会将CacheName作为key的前缀        cacheManager.setUsePrefix(true);        return cacheManager;    }    @Bean    public RedisCacheManager deptCacheManager(RedisTemplate&lt;Object, Department&gt; deptRedisTemplate){        RedisCacheManager cacheManager = new RedisCacheManager(deptRedisTemplate);        //key多了一个前缀        //使用前缀，默认会将CacheName作为key的前缀        cacheManager.setUsePrefix(true);        return cacheManager;    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 缓存 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot使用缓存(JCache/Redis) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot自定义Starter</title>
      <link href="/2019/09/24/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89Starter/"/>
      <url>/2019/09/24/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89Starter/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义starter"><a href="#自定义starter" class="headerlink" title="自定义starter"></a>自定义starter</h1><p>starter：</p><p>​    1、这个场景需要使用到的依赖是什么？</p><p>​    2、如何编写自动配置</p><pre><code class="java">@Configuration  //指定这个类是一个配置类@ConditionalOnXXX  //在指定条件成立的情况下自动配置类生效@AutoConfigureAfter  //指定自动配置类的顺序@Bean  //给容器中添加组件@ConfigurationPropertie结合相关xxxProperties类来绑定相关的配置@EnableConfigurationProperties //让xxxProperties生效加入到容器中自动配置类要能加载将需要启动就加载的自动配置类，配置在META-INF/spring.factoriesorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\</code></pre><p>​    3、模式：</p><p>启动器只用来做依赖导入；</p><p>专门来写一个自动配置模块；</p><p>启动器依赖自动配置；别人只需要引入启动器（starter）</p><p>mybatis-spring-boot-starter；自定义启动器名-spring-boot-starter</p><p>步骤：</p><p>1）、启动器模块</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt;    &lt;artifactId&gt;atguigu-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.0-SNAPSHOT&lt;/version&gt;    &lt;!--启动器--&gt;    &lt;dependencies&gt;        &lt;!--引入自动配置模块--&gt;        &lt;dependency&gt;            &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt;            &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/artifactId&gt;            &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>2）、自动配置模块</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;   xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;   &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;   &lt;groupId&gt;com.atguigu.starter&lt;/groupId&gt;   &lt;artifactId&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/artifactId&gt;   &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;   &lt;packaging&gt;jar&lt;/packaging&gt;   &lt;name&gt;atguigu-spring-boot-starter-autoconfigurer&lt;/name&gt;   &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;   &lt;parent&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;      &lt;version&gt;1.5.10.RELEASE&lt;/version&gt;      &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;   &lt;/parent&gt;   &lt;properties&gt;      &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;      &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;      &lt;java.version&gt;1.8&lt;/java.version&gt;   &lt;/properties&gt;   &lt;dependencies&gt;      &lt;!--引入spring-boot-starter；所有starter的基本配置--&gt;      &lt;dependency&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;         &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;      &lt;/dependency&gt;   &lt;/dependencies&gt;&lt;/project&gt;</code></pre><pre><code class="java">package com.atguigu.starter;import org.springframework.boot.context.properties.ConfigurationProperties;@ConfigurationProperties(prefix = &quot;atguigu.hello&quot;)public class HelloProperties {    private String prefix;    private String suffix;    public String getPrefix() {        return prefix;    }    public void setPrefix(String prefix) {        this.prefix = prefix;    }    public String getSuffix() {        return suffix;    }    public void setSuffix(String suffix) {        this.suffix = suffix;    }}</code></pre><pre><code class="java">package com.atguigu.starter;public class HelloService {    HelloProperties helloProperties;    public HelloProperties getHelloProperties() {        return helloProperties;    }    public void setHelloProperties(HelloProperties helloProperties) {        this.helloProperties = helloProperties;    }    public String sayHellAtguigu(String name){        return helloProperties.getPrefix()+&quot;-&quot; +name + helloProperties.getSuffix();    }}</code></pre><pre><code class="java">package com.atguigu.starter;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnWebApplication;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;@Configuration@ConditionalOnWebApplication //web应用才生效@EnableConfigurationProperties(HelloProperties.class)public class HelloServiceAutoConfiguration {    @Autowired    HelloProperties helloProperties;    @Bean    public HelloService helloService(){        HelloService service = new HelloService();        service.setHelloProperties(helloProperties);        return service;    }}</code></pre><h1 id="更多SpringBoot整合示例"><a href="#更多SpringBoot整合示例" class="headerlink" title="更多SpringBoot整合示例"></a>更多SpringBoot整合示例</h1><p><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" target="_blank" rel="noopener">https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples</a></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot自定义Starter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot启动配置原理源码解析</title>
      <link href="/2019/09/24/SpringBoot%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/09/24/SpringBoot%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E5%8E%9F%E7%90%86%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="启动配置原理"><a href="#启动配置原理" class="headerlink" title="启动配置原理"></a>启动配置原理</h1><p>几个重要的事件回调机制</p><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><p><strong>SpringApplicationRunListener</strong></p><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><p><strong>CommandLineRunner</strong></p><p>启动流程：</p><h2 id="1、创建SpringApplication对象"><a href="#1、创建SpringApplication对象" class="headerlink" title="1、创建SpringApplication对象"></a><strong>1、创建SpringApplication对象</strong></h2><pre><code class="java">initialize(sources);private void initialize(Object[] sources) {    //保存主配置类    if (sources != null &amp;&amp; sources.length &gt; 0) {        this.sources.addAll(Arrays.asList(sources));    }    //判断当前是否一个web应用    this.webEnvironment = deduceWebEnvironment();    //从类路径下找到META-INF/spring.factories配置的所有ApplicationContextInitializer；然后保存起来    setInitializers((Collection) getSpringFactoriesInstances(        ApplicationContextInitializer.class));    //从类路径下找到ETA-INF/spring.factories配置的所有ApplicationListener    setListeners((Collection) getSpringFactoriesInstances(ApplicationListener.class));    //从多个配置类中找到有main方法的主配置类    this.mainApplicationClass = deduceMainApplicationClass();}</code></pre><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569306077503.png" alt></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569306106845.png" alt></p><h2 id="2、运行run方法"><a href="#2、运行run方法" class="headerlink" title="2、运行run方法"></a>2、运行run方法</h2><pre><code class="java">public ConfigurableApplicationContext run(String... args) {   StopWatch stopWatch = new StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = null;   FailureAnalyzers analyzers = null;   configureHeadlessProperty();   //获取SpringApplicationRunListeners；从类路径下META-INF/spring.factories   SpringApplicationRunListeners listeners = getRunListeners(args);    //回调所有的获取SpringApplicationRunListener.starting()方法   listeners.starting();   try {       //封装命令行参数      ApplicationArguments applicationArguments = new DefaultApplicationArguments(            args);      //准备环境      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);               //创建环境完成后回调SpringApplicationRunListener.environmentPrepared()；表示环境准备完成      Banner printedBanner = printBanner(environment);       //创建ApplicationContext；决定创建web的ioc还是普通的ioc      context = createApplicationContext();      analyzers = new FailureAnalyzers(context);       //准备上下文环境;将environment保存到ioc中；而且applyInitializers()；       //applyInitializers()：回调之前保存的所有的ApplicationContextInitializer的initialize方法       //回调所有的SpringApplicationRunListener的contextPrepared()；       //      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);       //prepareContext运行完成以后回调所有的SpringApplicationRunListener的contextLoaded（）；       //s刷新容器；ioc容器初始化（如果是web应用还会创建嵌入式的Tomcat）；Spring注解版       //扫描，创建，加载所有组件的地方；（配置类，组件，自动配置）      refreshContext(context);       //从ioc容器中获取所有的ApplicationRunner和CommandLineRunner进行回调       //ApplicationRunner先回调，CommandLineRunner再回调      afterRefresh(context, applicationArguments);       //所有的SpringApplicationRunListener回调finished方法      listeners.finished(context, null);      stopWatch.stop();      if (this.logStartupInfo) {         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      }       //整个SpringBoot应用启动完成以后返回启动的ioc容器；      return context;   }   catch (Throwable ex) {      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   }}</code></pre><h2 id="3、事件监听机制"><a href="#3、事件监听机制" class="headerlink" title="3、事件监听机制"></a>3、事件监听机制</h2><p>配置在META-INF/spring.factories</p><p><strong>ApplicationContextInitializer</strong></p><pre><code class="java">public class HelloApplicationContextInitializer implements ApplicationContextInitializer&lt;ConfigurableApplicationContext&gt; {    @Override    public void initialize(ConfigurableApplicationContext applicationContext) {        System.out.println(&quot;ApplicationContextInitializer...initialize...&quot;+applicationContext);    }}</code></pre><p><strong>SpringApplicationRunListener</strong></p><pre><code class="java">public class HelloSpringApplicationRunListener implements SpringApplicationRunListener {    //必须有的构造器    public HelloSpringApplicationRunListener(SpringApplication application, String[] args){    }    @Override    public void starting() {        System.out.println(&quot;SpringApplicationRunListener...starting...&quot;);    }    @Override    public void environmentPrepared(ConfigurableEnvironment environment) {        Object o = environment.getSystemProperties().get(&quot;os.name&quot;);        System.out.println(&quot;SpringApplicationRunListener...environmentPrepared..&quot;+o);    }    @Override    public void contextPrepared(ConfigurableApplicationContext context) {        System.out.println(&quot;SpringApplicationRunListener...contextPrepared...&quot;);    }    @Override    public void contextLoaded(ConfigurableApplicationContext context) {        System.out.println(&quot;SpringApplicationRunListener...contextLoaded...&quot;);    }    @Override    public void finished(ConfigurableApplicationContext context, Throwable exception) {        System.out.println(&quot;SpringApplicationRunListener...finished...&quot;);    }}</code></pre><p>配置（META-INF/spring.factories）</p><pre><code class="properties">org.springframework.context.ApplicationContextInitializer=\com.atguigu.springboot.listener.HelloApplicationContextInitializerorg.springframework.boot.SpringApplicationRunListener=\com.atguigu.springboot.listener.HelloSpringApplicationRunListener</code></pre><p>只需要放在ioc容器中</p><p><strong>ApplicationRunner</strong></p><pre><code class="java">@Componentpublic class HelloApplicationRunner implements ApplicationRunner {    @Override    public void run(ApplicationArguments args) throws Exception {        System.out.println(&quot;ApplicationRunner...run....&quot;);    }}</code></pre><p><strong>CommandLineRunner</strong></p><pre><code class="java">@Componentpublic class HelloCommandLineRunner implements CommandLineRunner {    @Override    public void run(String... args) throws Exception {        System.out.println(&quot;CommandLineRunner...run...&quot;+ Arrays.asList(args));    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot启动原理源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot与数据访问</title>
      <link href="/2019/09/23/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/"/>
      <url>/2019/09/23/SpringBoot%E4%B8%8E%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot与数据访问"><a href="#SpringBoot与数据访问" class="headerlink" title="SpringBoot与数据访问"></a>SpringBoot与数据访问</h1><h2 id="1、JDBC"><a href="#1、JDBC" class="headerlink" title="1、JDBC"></a>1、JDBC</h2><pre><code class="xml">&lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;mysql&lt;/groupId&gt;            &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;            &lt;scope&gt;runtime&lt;/scope&gt;        &lt;/dependency&gt;</code></pre><pre><code class="yaml">spring:  datasource:    username: root    password: 123456    url: jdbc:mysql://192.168.15.22:3306/jdbc    driver-class-name: com.mysql.jdbc.Driver</code></pre><p>效果：</p><p>​    默认是用org.apache.tomcat.jdbc.pool.DataSource作为数据源；</p><p>​    数据源的相关配置都在DataSourceProperties里面；</p><p>自动配置原理：</p><p>org.springframework.boot.autoconfigure.jdbc：</p><p>1、参考DataSourceConfiguration，根据配置创建数据源，默认使用Tomcat连接池；可以使用spring.datasource.type指定自定义的数据源类型；</p><p>2、SpringBoot默认可以支持；</p><pre><code>org.apache.tomcat.jdbc.pool.DataSource、HikariDataSource、BasicDataSource、</code></pre><p>3、自定义数据源类型</p><pre><code class="java">/** * Generic DataSource configuration. */@ConditionalOnMissingBean(DataSource.class)@ConditionalOnProperty(name = &quot;spring.datasource.type&quot;)static class Generic {   @Bean   public DataSource dataSource(DataSourceProperties properties) {       //使用DataSourceBuilder创建数据源，利用反射创建响应type的数据源，并且绑定相关属性      return properties.initializeDataSourceBuilder().build();   }}</code></pre><p>4、<strong>DataSourceInitializer：ApplicationListener</strong>；</p><p>​    作用：</p><p>​        1）、runSchemaScripts();运行建表语句；</p><p>​        2）、runDataScripts();运行插入数据的sql语句；</p><p>默认只需要将文件命名为：</p><pre><code class="properties">schema-*.sql、data-*.sql默认规则：schema.sql，schema-all.sql；可以使用       schema:      - classpath:department.sql      指定位置</code></pre><p>5、操作数据库：自动配置了JdbcTemplate操作数据库</p><h2 id="2、整合Druid数据源"><a href="#2、整合Druid数据源" class="headerlink" title="2、整合Druid数据源"></a>2、整合Druid数据源</h2><pre><code class="java">导入druid数据源@Configurationpublic class DruidConfig {    @ConfigurationProperties(prefix = &quot;spring.datasource&quot;)    @Bean    public DataSource druid(){       return  new DruidDataSource();    }    //配置Druid的监控    //1、配置一个管理后台的Servlet    @Bean    public ServletRegistrationBean statViewServlet(){        ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), &quot;/druid/*&quot;);        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;loginUsername&quot;,&quot;admin&quot;);        initParams.put(&quot;loginPassword&quot;,&quot;123456&quot;);        initParams.put(&quot;allow&quot;,&quot;&quot;);//默认就是允许所有访问        initParams.put(&quot;deny&quot;,&quot;192.168.15.21&quot;);        bean.setInitParameters(initParams);        return bean;    }    //2、配置一个web监控的filter    @Bean    public FilterRegistrationBean webStatFilter(){        FilterRegistrationBean bean = new FilterRegistrationBean();        bean.setFilter(new WebStatFilter());        Map&lt;String,String&gt; initParams = new HashMap&lt;&gt;();        initParams.put(&quot;exclusions&quot;,&quot;*.js,*.css,/druid/*&quot;);        bean.setInitParameters(initParams);        bean.setUrlPatterns(Arrays.asList(&quot;/*&quot;));        return  bean;    }}</code></pre><h2 id="3、整合MyBatis"><a href="#3、整合MyBatis" class="headerlink" title="3、整合MyBatis"></a>3、整合MyBatis</h2><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;            &lt;version&gt;1.3.1&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569305807509.png" alt></p><p>步骤：</p><p>​    1）、配置数据源相关属性（见上一节Druid）</p><p>​    2）、给数据库建表</p><p>​    3）、创建JavaBean</p><h3 id="4）、注解版"><a href="#4）、注解版" class="headerlink" title="4）、注解版"></a>4）、注解版</h3><pre><code class="java">//指定这是一个操作数据库的mapper@Mapperpublic interface DepartmentMapper {    @Select(&quot;select * from department where id=#{id}&quot;)    public Department getDeptById(Integer id);    @Delete(&quot;delete from department where id=#{id}&quot;)    public int deleteDeptById(Integer id);    @Options(useGeneratedKeys = true,keyProperty = &quot;id&quot;)    @Insert(&quot;insert into department(departmentName) values(#{departmentName})&quot;)    public int insertDept(Department department);    @Update(&quot;update department set departmentName=#{departmentName} where id=#{id}&quot;)    public int updateDept(Department department);}</code></pre><p>问题：</p><p>自定义MyBatis的配置规则；给容器中添加一个ConfigurationCustomizer；</p><pre><code class="java">@org.springframework.context.annotation.Configurationpublic class MyBatisConfig {    @Bean    public ConfigurationCustomizer configurationCustomizer(){        return new ConfigurationCustomizer(){            @Override            public void customize(Configuration configuration) {                configuration.setMapUnderscoreToCamelCase(true);            }        };    }}</code></pre><pre><code class="java">使用MapperScan批量扫描所有的Mapper接口；@MapperScan(value = &quot;com.atguigu.springboot.mapper&quot;)@SpringBootApplicationpublic class SpringBoot06DataMybatisApplication {    public static void main(String[] args) {        SpringApplication.run(SpringBoot06DataMybatisApplication.class, args);    }}</code></pre><h3 id="5）、配置文件版"><a href="#5）、配置文件版" class="headerlink" title="5）、配置文件版"></a>5）、配置文件版</h3><pre><code class="yaml">mybatis:  config-location: classpath:mybatis/mybatis-config.xml 指定全局配置文件的位置  mapper-locations: classpath:mybatis/mapper/*.xml  指定sql映射文件的位置</code></pre><p>更多使用参照</p><p><a href="http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/" target="_blank" rel="noopener">http://www.mybatis.org/spring-boot-starter/mybatis-spring-boot-autoconfigure/</a></p><h2 id="4、整合SpringData-JPA"><a href="#4、整合SpringData-JPA" class="headerlink" title="4、整合SpringData JPA"></a>4、整合SpringData JPA</h2><h3 id="1）、SpringData简介"><a href="#1）、SpringData简介" class="headerlink" title="1）、SpringData简介"></a>1）、SpringData简介</h3><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1569305838706.png" alt></p><h3 id="2）、整合SpringData-JPA"><a href="#2）、整合SpringData-JPA" class="headerlink" title="2）、整合SpringData JPA"></a>2）、整合SpringData JPA</h3><p>JPA:ORM（Object Relational Mapping）；</p><p>1）、编写一个实体类（bean）和数据表进行映射，并且配置好映射关系；</p><pre><code class="java">//使用JPA注解配置映射关系@Entity //告诉JPA这是一个实体类（和数据表映射的类）@Table(name = &quot;tbl_user&quot;) //@Table来指定和哪个数据表对应;如果省略默认表名就是user；public class User {    @Id //这是一个主键    @GeneratedValue(strategy = GenerationType.IDENTITY)//自增主键    private Integer id;    @Column(name = &quot;last_name&quot;,length = 50) //这是和数据表对应的一个列    private String lastName;    @Column //省略默认列名就是属性名    private String email;</code></pre><p>2）、编写一个Dao接口来操作实体类对应的数据表（Repository）</p><pre><code class="java">//继承JpaRepository来完成对数据库的操作public interface UserRepository extends JpaRepository&lt;User,Integer&gt; {}</code></pre><p>3）、基本的配置JpaProperties</p><pre><code class="yaml">spring:   jpa:    hibernate:#     更新或者创建数据表结构      ddl-auto: update#    控制台显示SQL    show-sql: true</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot和JDBC和Mybatis和Druid </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker基础</title>
      <link href="/2019/09/20/Docker%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/09/20/Docker%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p><strong>Docker</strong>是一个开源的应用容器引擎；是一个轻量级容器技术；</p><p>Docker支持将软件编译成一个镜像；然后在镜像中各种软件做好配置，将镜像发布出去，其他使用者可以直接使用这个镜像；</p><p>运行中的这个镜像称为容器，容器启动是非常快速的。</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568978898749.png" alt></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568978931956.png" alt></p><h2 id="2、核心概念"><a href="#2、核心概念" class="headerlink" title="2、核心概念"></a>2、核心概念</h2><p>docker主机(Host)：安装了Docker程序的机器（Docker直接安装在操作系统之上）；</p><p>docker客户端(Client)：连接docker主机进行操作；</p><p>docker仓库(Registry)：用来保存各种打包好的软件镜像；</p><p>docker镜像(Images)：软件打包好的镜像；放在docker仓库中；</p><p>docker容器(Container)：镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568978963753.png" alt></p><p>使用Docker的步骤：</p><p>1）、安装Docker</p><p>2）、去Docker仓库找到这个软件对应的镜像；</p><p>3）、使用Docker运行这个镜像，这个镜像就会生成一个Docker容器；</p><p>4）、对容器的启动停止就是对软件的启动停止；</p><h2 id="3、安装Docker"><a href="#3、安装Docker" class="headerlink" title="3、安装Docker"></a>3、安装Docker</h2><h4 id="1）、安装linux虚拟机"><a href="#1）、安装linux虚拟机" class="headerlink" title="1）、安装linux虚拟机"></a>1）、安装linux虚拟机</h4><p>​    1）、VMWare、VirtualBox（安装）；</p><p>​    2）、导入虚拟机文件centos7-atguigu.ova；</p><p>​    3）、双击启动linux虚拟机;使用  root/ 123456登陆</p><p>​    4）、使用客户端连接linux服务器进行命令操作；</p><p>​    5）、设置虚拟机网络；</p><p>​        桥接网络===选好网卡====接入网线；</p><p>​    6）、设置好网络以后使用命令重启虚拟机的网络</p><pre><code class="shell">service network restart</code></pre><p>​    7）、查看linux的ip地址</p><pre><code class="shell">ip addr</code></pre><p>​    8）、使用客户端连接linux；</p><h4 id="2）、在linux虚拟机上安装docker"><a href="#2）、在linux虚拟机上安装docker" class="headerlink" title="2）、在linux虚拟机上安装docker"></a>2）、在linux虚拟机上安装docker</h4><p>步骤：</p><pre><code class="shell">1、检查内核版本，必须是3.10及以上uname -r2、安装dockeryum install docker3、输入y确认安装4、启动docker[root@localhost ~]# systemctl start docker[root@localhost ~]# docker -vDocker version 1.12.6, build 3e8e77d/1.12.65、开机启动docker[root@localhost ~]# systemctl enable dockerCreated symlink from /etc/systemd/system/multi-user.target.wants/docker.service to /usr/lib/systemd/system/docker.service.6、停止dockersystemctl stop docker</code></pre><h2 id="4、Docker常用命令-amp-操作"><a href="#4、Docker常用命令-amp-操作" class="headerlink" title="4、Docker常用命令&amp;操作"></a>4、Docker常用命令&amp;操作</h2><h3 id="1）、镜像操作"><a href="#1）、镜像操作" class="headerlink" title="1）、镜像操作"></a>1）、镜像操作</h3><table><thead><tr><th>操作</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>检索</td><td>docker  search 关键字  eg：docker  search redis</td><td>我们经常去docker  hub上检索镜像的详细信息，如镜像的TAG。</td></tr><tr><td>拉取</td><td>docker pull 镜像名:tag</td><td>:tag是可选的，tag表示标签，多为软件的版本，默认是latest</td></tr><tr><td>列表</td><td>docker images</td><td>查看所有本地镜像</td></tr><tr><td>删除</td><td>docker rmi image-id</td><td>删除指定的本地镜像</td></tr></tbody></table><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">https://hub.docker.com/</a></p><h3 id="2）、容器操作"><a href="#2）、容器操作" class="headerlink" title="2）、容器操作"></a>2）、容器操作</h3><p>软件镜像（QQ安装程序）—-运行镜像—-产生一个容器（正在运行的软件，运行的QQ）；</p><p>步骤：</p><pre><code class="shell">1、搜索镜像[root@localhost ~]# docker search tomcat2、拉取镜像[root@localhost ~]# docker pull tomcat3、根据镜像启动容器docker run --name mytomcat -d tomcat:latest4、docker ps  查看运行中的容器5、 停止运行中的容器docker stop  容器的id6、查看所有的容器docker ps -a7、启动容器docker start 容器id8、删除一个容器 docker rm 容器id9、启动一个做了端口映射的tomcat[root@localhost ~]# docker run -d -p 8888:8080 tomcat-d：后台运行-p: 将主机的端口映射到容器的一个端口    主机端口:容器内部的端口10、为了演示简单关闭了linux的防火墙service firewalld status ；查看防火墙状态service firewalld stop：关闭防火墙11、查看容器的日志docker logs container-name/container-id更多命令参看https://docs.docker.com/engine/reference/commandline/docker/可以参考每一个镜像的文档</code></pre><h3 id="3）、安装MySQL示例"><a href="#3）、安装MySQL示例" class="headerlink" title="3）、安装MySQL示例"></a>3）、安装MySQL示例</h3><pre><code class="shell">docker pull mysql</code></pre><p>错误的启动</p><pre><code class="shell">[root@localhost ~]# docker run --name mysql01 -d mysql42f09819908bb72dd99ae19e792e0a5d03c48638421fa64cce5f8ba0f40f5846mysql退出了[root@localhost ~]# docker ps -aCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                           PORTS               NAMES42f09819908b        mysql               &quot;docker-entrypoint.sh&quot;   34 seconds ago      Exited (1) 33 seconds ago                            mysql01538bde63e500        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       compassionate_goldstinec4f1ac60b3fc        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       lonely_fermi81ec743a5271        tomcat              &quot;catalina.sh run&quot;        About an hour ago   Exited (143) About an hour ago                       sick_ramanujan//错误日志[root@localhost ~]# docker logs 42f09819908berror: database is uninitialized and password option is not specified   You need to specify one of MYSQL_ROOT_PASSWORD, MYSQL_ALLOW_EMPTY_PASSWORD and MYSQL_RANDOM_ROOT_PASSWORD；这个三个参数必须指定一个</code></pre><p>正确的启动</p><pre><code class="shell">[root@localhost ~]# docker run --name mysql01 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlb874c56bec49fb43024b3805ab51e9097da779f2f572c22c695305dedd684c5f[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMESb874c56bec49        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 3 seconds        3306/tcp            mysql01</code></pre><p>做了端口映射</p><pre><code class="shell">[root@localhost ~]# docker run -p 3306:3306 --name mysql02 -e MYSQL_ROOT_PASSWORD=123456 -d mysqlad10e4bc5c6a0f61cbad43898de71d366117d120e39db651844c0e73863b9434[root@localhost ~]# docker psCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMESad10e4bc5c6a        mysql               &quot;docker-entrypoint.sh&quot;   4 seconds ago       Up 2 seconds        0.0.0.0:3306-&gt;3306/tcp   mysql02</code></pre><p>几个其他的高级操作</p><pre><code>docker run --name mysql03 -v /conf/mysql:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag把主机的/conf/mysql文件夹挂载到 mysqldocker容器的/etc/mysql/conf.d文件夹里面改mysql的配置文件就只需要把mysql配置文件放在自定义的文件夹下（/conf/mysql）docker run --name some-mysql -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:tag --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci指定mysql的一些配置参数</code></pre>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot CRUD实践 （国际化，登录拦截）</title>
      <link href="/2019/09/20/SpringBoot-CRUD%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%BD%E9%99%85%E5%8C%96%EF%BC%8C%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%EF%BC%89/"/>
      <url>/2019/09/20/SpringBoot-CRUD%E5%AE%9E%E8%B7%B5%EF%BC%88%E5%9B%BD%E9%99%85%E5%8C%96%EF%BC%8C%E7%99%BB%E5%BD%95%E6%8B%A6%E6%88%AA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="RestfulCRUD"><a href="#RestfulCRUD" class="headerlink" title="RestfulCRUD"></a>RestfulCRUD</h2><h3 id="1）、默认访问首页"><a href="#1）、默认访问首页" class="headerlink" title="1）、默认访问首页"></a>1）、默认访问首页</h3><pre><code class="java">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能//@EnableWebMvc   不要接管SpringMVC@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter {    @Override    public void addViewControllers(ViewControllerRegistry registry) {       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    }    //所有的WebMvcConfigurerAdapter组件都会一起起作用    @Bean //将组件注册在容器    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {            @Override            public void addViewControllers(ViewControllerRegistry registry) {                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);            }        };        return adapter;    }}</code></pre><h3 id="2）、国际化"><a href="#2）、国际化" class="headerlink" title="2）、国际化"></a>2）、国际化</h3><p><strong>1）、编写国际化配置文件；</strong></p><p>2）、使用ResourceBundleMessageSource管理国际化资源文件</p><p>3）、在页面使用fmt:message取出国际化内容</p><p>步骤：</p><p>1）、编写国际化配置文件，抽取页面需要显示的国际化消息</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568947838760.png" alt></p><p>2）、SpringBoot自动配置好了管理国际化资源文件的组件；</p><pre><code class="java">@ConfigurationProperties(prefix = &quot;spring.messages&quot;)public class MessageSourceAutoConfiguration {    /**     * Comma-separated list of basenames (essentially a fully-qualified classpath     * location), each following the ResourceBundle convention with relaxed support for     * slash based locations. If it doesn&#39;t contain a package qualifier (such as     * &quot;org.mypackage&quot;), it will be resolved from the classpath root.     */    private String basename = &quot;messages&quot;;      //我们的配置文件可以直接放在类路径下叫messages.properties；    @Bean    public MessageSource messageSource() {        ResourceBundleMessageSource messageSource = new ResourceBundleMessageSource();        if (StringUtils.hasText(this.basename)) {            //设置国际化资源文件的基础名（去掉语言国家代码的）            messageSource.setBasenames(StringUtils.commaDelimitedListToStringArray(                    StringUtils.trimAllWhitespace(this.basename)));        }        if (this.encoding != null) {            messageSource.setDefaultEncoding(this.encoding.name());        }        messageSource.setFallbackToSystemLocale(this.fallbackToSystemLocale);        messageSource.setCacheSeconds(this.cacheSeconds);        messageSource.setAlwaysUseMessageFormat(this.alwaysUseMessageFormat);        return messageSource;    }</code></pre><p>3）、去页面获取国际化的值；</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568947878695.png" alt></p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;  xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;    &lt;head&gt;        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1, shrink-to-fit=no&quot;&gt;        &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;        &lt;meta name=&quot;author&quot; content=&quot;&quot;&gt;        &lt;title&gt;Signin Template for Bootstrap&lt;/title&gt;        &lt;!-- Bootstrap core CSS --&gt;        &lt;link href=&quot;asserts/css/bootstrap.min.css&quot; th:href=&quot;@{/webjars/bootstrap/4.0.0/css/bootstrap.css}&quot; rel=&quot;stylesheet&quot;&gt;        &lt;!-- Custom styles for this template --&gt;        &lt;link href=&quot;asserts/css/signin.css&quot; th:href=&quot;@{/asserts/css/signin.css}&quot; rel=&quot;stylesheet&quot;&gt;    &lt;/head&gt;    &lt;body class=&quot;text-center&quot;&gt;        &lt;form class=&quot;form-signin&quot; action=&quot;dashboard.html&quot;&gt;            &lt;img class=&quot;mb-4&quot; th:src=&quot;@{/asserts/img/bootstrap-solid.svg}&quot; src=&quot;asserts/img/bootstrap-solid.svg&quot; alt=&quot;&quot; width=&quot;72&quot; height=&quot;72&quot;&gt;            &lt;h1 class=&quot;h3 mb-3 font-weight-normal&quot; th:text=&quot;#{login.tip}&quot;&gt;Please sign in&lt;/h1&gt;            &lt;label class=&quot;sr-only&quot; th:text=&quot;#{login.username}&quot;&gt;Username&lt;/label&gt;            &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;Username&quot; th:placeholder=&quot;#{login.username}&quot; required=&quot;&quot; autofocus=&quot;&quot;&gt;            &lt;label class=&quot;sr-only&quot; th:text=&quot;#{login.password}&quot;&gt;Password&lt;/label&gt;            &lt;input type=&quot;password&quot; class=&quot;form-control&quot; placeholder=&quot;Password&quot; th:placeholder=&quot;#{login.password}&quot; required=&quot;&quot;&gt;            &lt;div class=&quot;checkbox mb-3&quot;&gt;                &lt;label&gt;                  &lt;input type=&quot;checkbox&quot; value=&quot;remember-me&quot;/&gt; [[#{login.remember}]]        &lt;/label&gt;            &lt;/div&gt;            &lt;button class=&quot;btn btn-lg btn-primary btn-block&quot; type=&quot;submit&quot; th:text=&quot;#{login.btn}&quot;&gt;Sign in&lt;/button&gt;            &lt;p class=&quot;mt-5 mb-3 text-muted&quot;&gt;© 2017-2018&lt;/p&gt;            &lt;a class=&quot;btn btn-sm&quot;&gt;中文&lt;/a&gt;            &lt;a class=&quot;btn btn-sm&quot;&gt;English&lt;/a&gt;        &lt;/form&gt;    &lt;/body&gt;&lt;/html&gt;</code></pre><p>效果：根据浏览器语言设置的信息切换了国际化；</p><p>原理：</p><p>​    国际化Locale（区域信息对象）；LocaleResolver（获取区域信息对象）；</p><pre><code class="java">        @Bean        @ConditionalOnMissingBean        @ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;locale&quot;)        public LocaleResolver localeResolver() {            if (this.mvcProperties                    .getLocaleResolver() == WebMvcProperties.LocaleResolver.FIXED) {                return new FixedLocaleResolver(this.mvcProperties.getLocale());            }            AcceptHeaderLocaleResolver localeResolver = new AcceptHeaderLocaleResolver();            localeResolver.setDefaultLocale(this.mvcProperties.getLocale());            return localeResolver;        }默认的就是根据请求头带来的区域信息获取Locale进行国际化</code></pre><p>4）、点击链接切换国际化</p><pre><code class="java">/** * 可以在连接上携带区域信息 */public class MyLocaleResolver implements LocaleResolver {    @Override    public Locale resolveLocale(HttpServletRequest request) {        String l = request.getParameter(&quot;l&quot;);        Locale locale = Locale.getDefault();        if(!StringUtils.isEmpty(l)){            String[] split = l.split(&quot;_&quot;);            locale = new Locale(split[0],split[1]);        }        return locale;    }    @Override    public void setLocale(HttpServletRequest request, HttpServletResponse response, Locale locale) {    }} @Bean    public LocaleResolver localeResolver(){        return new MyLocaleResolver();    }}</code></pre><h3 id="3）、登陆"><a href="#3）、登陆" class="headerlink" title="3）、登陆"></a>3）、登陆</h3><p>开发期间模板引擎页面修改以后，要实时生效</p><p>1）、禁用模板引擎的缓存</p><pre><code># 禁用缓存spring.thymeleaf.cache=false </code></pre><p>2）、页面修改完成以后ctrl+f9：重新编译；</p><p>登陆错误消息的显示</p><pre><code class="html">&lt;p style=&quot;color: red&quot; th:text=&quot;${msg}&quot; th:if=&quot;${not #strings.isEmpty(msg)}&quot;&gt;&lt;/p&gt;</code></pre><h3 id="4）、拦截器进行登陆检查"><a href="#4）、拦截器进行登陆检查" class="headerlink" title="4）、拦截器进行登陆检查"></a>4）、拦截器进行登陆检查</h3><p>拦截器</p><pre><code class="java">/** * 登陆检查， */public class LoginHandlerInterceptor implements HandlerInterceptor {    //目标方法执行之前    @Override    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {        Object user = request.getSession().getAttribute(&quot;loginUser&quot;);        if(user == null){            //未登陆，返回登陆页面            request.setAttribute(&quot;msg&quot;,&quot;没有权限请先登陆&quot;);            request.getRequestDispatcher(&quot;/index.html&quot;).forward(request,response);            return false;        }else{            //已登陆，放行请求            return true;        }    }    @Override    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {    }    @Override    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {    }}</code></pre><p>注册拦截器</p><pre><code class="java">  //所有的WebMvcConfigurerAdapter组件都会一起起作用    @Bean //将组件注册在容器    public WebMvcConfigurerAdapter webMvcConfigurerAdapter(){        WebMvcConfigurerAdapter adapter = new WebMvcConfigurerAdapter() {            @Override            public void addViewControllers(ViewControllerRegistry registry) {                registry.addViewController(&quot;/&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/index.html&quot;).setViewName(&quot;login&quot;);                registry.addViewController(&quot;/main.html&quot;).setViewName(&quot;dashboard&quot;);            }            //注册拦截器            @Override            public void addInterceptors(InterceptorRegistry registry) {                //super.addInterceptors(registry);                //静态资源；  *.css , *.js                //SpringBoot已经做好了静态资源映射                registry.addInterceptor(new LoginHandlerInterceptor()).addPathPatterns(&quot;/**&quot;)                        .excludePathPatterns(&quot;/index.html&quot;,&quot;/&quot;,&quot;/user/login&quot;);            }        };        return adapter;    }</code></pre><h3 id="5）、CRUD-员工列表"><a href="#5）、CRUD-员工列表" class="headerlink" title="5）、CRUD-员工列表"></a>5）、CRUD-员工列表</h3><p>实验要求：</p><p>1）、RestfulCRUD：CRUD满足Rest风格；</p><p>URI：  /资源名称/资源标识       HTTP请求方式区分对资源CRUD操作</p><table><thead><tr><th></th><th>普通CRUD（uri来区分操作）</th><th>RestfulCRUD</th></tr></thead><tbody><tr><td>查询</td><td>getEmp</td><td>emp—GET</td></tr><tr><td>添加</td><td>addEmp?xxx</td><td>emp—POST</td></tr><tr><td>修改</td><td>updateEmp?id=xxx&amp;xxx=xx</td><td>emp/{id}—PUT</td></tr><tr><td>删除</td><td>deleteEmp?id=1</td><td>emp/{id}—DELETE</td></tr></tbody></table><p>2）、实验的请求架构;</p><table><thead><tr><th>实验功能</th><th>请求URI</th><th>请求方式</th></tr></thead><tbody><tr><td>查询所有员工</td><td>emps</td><td>GET</td></tr><tr><td>查询某个员工(来到修改页面)</td><td>emp/1</td><td>GET</td></tr><tr><td>来到添加页面</td><td>emp</td><td>GET</td></tr><tr><td>添加员工</td><td>emp</td><td>POST</td></tr><tr><td>来到修改页面（查出员工进行信息回显）</td><td>emp/1</td><td>GET</td></tr><tr><td>修改员工</td><td>emp</td><td>PUT</td></tr><tr><td>删除员工</td><td>emp/1</td><td>DELETE</td></tr></tbody></table><p>3）、员工列表：</p><h4 id="thymeleaf公共页面元素抽取"><a href="#thymeleaf公共页面元素抽取" class="headerlink" title="thymeleaf公共页面元素抽取"></a>thymeleaf公共页面元素抽取</h4><pre><code class="html">1、抽取公共片段&lt;div th:fragment=&quot;copy&quot;&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt;2、引入公共片段&lt;div th:insert=&quot;~{footer :: copy}&quot;&gt;&lt;/div&gt;~{templatename::selector}：模板名::选择器~{templatename::fragmentname}:模板名::片段名3、默认效果：insert的公共片段在div标签中如果使用th:insert等属性进行引入，可以不用写~{}：行内写法可以加上：[[~{}]];[(~{})]；</code></pre><p>三种引入公共片段的th属性：</p><p><strong>th:insert</strong>：将公共片段整个插入到声明引入的元素中</p><p><strong>th:replace</strong>：将声明引入的元素替换为公共片段</p><p><strong>th:include</strong>：将被引入的片段的内容包含进这个标签中</p><pre><code class="html">&lt;footer th:fragment=&quot;copy&quot;&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/footer&gt;引入方式&lt;div th:insert=&quot;footer :: copy&quot;&gt;&lt;/div&gt;&lt;div th:replace=&quot;footer :: copy&quot;&gt;&lt;/div&gt;&lt;div th:include=&quot;footer :: copy&quot;&gt;&lt;/div&gt;效果&lt;div&gt;    &lt;footer&gt;    &amp;copy; 2011 The Good Thymes Virtual Grocery    &lt;/footer&gt;&lt;/div&gt;&lt;footer&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/footer&gt;&lt;div&gt;&amp;copy; 2011 The Good Thymes Virtual Grocery&lt;/div&gt;</code></pre><p>引入片段的时候传入参数： </p><pre><code class="html">&lt;nav class=&quot;col-md-2 d-none d-md-block bg-light sidebar&quot; id=&quot;sidebar&quot;&gt;    &lt;div class=&quot;sidebar-sticky&quot;&gt;        &lt;ul class=&quot;nav flex-column&quot;&gt;            &lt;li class=&quot;nav-item&quot;&gt;                &lt;a class=&quot;nav-link active&quot;                   th:class=&quot;${activeUri==&#39;main.html&#39;?&#39;nav-link active&#39;:&#39;nav-link&#39;}&quot;                   href=&quot;#&quot; th:href=&quot;@{/main.html}&quot;&gt;                    &lt;svg xmlns=&quot;http://www.w3.org/2000/svg&quot; width=&quot;24&quot; height=&quot;24&quot; viewBox=&quot;0 0 24 24&quot; fill=&quot;none&quot; stroke=&quot;currentColor&quot; stroke-width=&quot;2&quot; stroke-linecap=&quot;round&quot; stroke-linejoin=&quot;round&quot; class=&quot;feather feather-home&quot;&gt;                        &lt;path d=&quot;M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z&quot;&gt;&lt;/path&gt;                        &lt;polyline points=&quot;9 22 9 12 15 12 15 22&quot;&gt;&lt;/polyline&gt;                    &lt;/svg&gt;                    Dashboard &lt;span class=&quot;sr-only&quot;&gt;(current)&lt;/span&gt;                &lt;/a&gt;            &lt;/li&gt;&lt;!--引入侧边栏;传入参数--&gt;&lt;div th:replace=&quot;commons/bar::#sidebar(activeUri=&#39;emps&#39;)&quot;&gt;&lt;/div&gt;</code></pre><h3 id="6）、CRUD-员工添加"><a href="#6）、CRUD-员工添加" class="headerlink" title="6）、CRUD-员工添加"></a>6）、CRUD-员工添加</h3><p>添加页面</p><pre><code class="html">&lt;form&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;LastName&lt;/label&gt;        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot;&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;Email&lt;/label&gt;        &lt;input type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan@atguigu.com&quot;&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt;        &lt;div class=&quot;form-check form-check-inline&quot;&gt;            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot;  value=&quot;1&quot;&gt;            &lt;label class=&quot;form-check-label&quot;&gt;男&lt;/label&gt;        &lt;/div&gt;        &lt;div class=&quot;form-check form-check-inline&quot;&gt;            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot;  value=&quot;0&quot;&gt;            &lt;label class=&quot;form-check-label&quot;&gt;女&lt;/label&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;department&lt;/label&gt;        &lt;select class=&quot;form-control&quot;&gt;            &lt;option&gt;1&lt;/option&gt;            &lt;option&gt;2&lt;/option&gt;            &lt;option&gt;3&lt;/option&gt;            &lt;option&gt;4&lt;/option&gt;            &lt;option&gt;5&lt;/option&gt;        &lt;/select&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;Birth&lt;/label&gt;        &lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot;&gt;    &lt;/div&gt;    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot;&gt;添加&lt;/button&gt;&lt;/form&gt;</code></pre><p>提交的数据格式不对：生日：日期；</p><p>2017-12-12；2017/12/12；2017.12.12；</p><p>日期的格式化；SpringMVC将页面提交的值需要转换为指定的类型;</p><p>2017-12-12—Date； 类型转换，格式化;</p><p>默认日期是按照/的方式；</p><h3 id="7）、CRUD-员工修改"><a href="#7）、CRUD-员工修改" class="headerlink" title="7）、CRUD-员工修改"></a>7）、CRUD-员工修改</h3><p>修改添加二合一表单</p><pre><code class="html">&lt;!--需要区分是员工修改还是添加；--&gt;&lt;form th:action=&quot;@{/emp}&quot; method=&quot;post&quot;&gt;    &lt;!--发送put请求修改员工数据--&gt;    &lt;!--1、SpringMVC中配置HiddenHttpMethodFilter;（SpringBoot自动配置好的）2、页面创建一个post表单3、创建一个input项，name=&quot;_method&quot;;值就是我们指定的请求方式--&gt;    &lt;input type=&quot;hidden&quot; name=&quot;_method&quot; value=&quot;put&quot; th:if=&quot;${emp!=null}&quot;/&gt;    &lt;input type=&quot;hidden&quot; name=&quot;id&quot; th:if=&quot;${emp!=null}&quot; th:value=&quot;${emp.id}&quot;&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;LastName&lt;/label&gt;        &lt;input name=&quot;lastName&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot; th:value=&quot;${emp!=null}?${emp.lastName}&quot;&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;Email&lt;/label&gt;        &lt;input name=&quot;email&quot; type=&quot;email&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan@atguigu.com&quot; th:value=&quot;${emp!=null}?${emp.email}&quot;&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;Gender&lt;/label&gt;&lt;br/&gt;        &lt;div class=&quot;form-check form-check-inline&quot;&gt;            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;1&quot; th:checked=&quot;${emp!=null}?${emp.gender==1}&quot;&gt;            &lt;label class=&quot;form-check-label&quot;&gt;男&lt;/label&gt;        &lt;/div&gt;        &lt;div class=&quot;form-check form-check-inline&quot;&gt;            &lt;input class=&quot;form-check-input&quot; type=&quot;radio&quot; name=&quot;gender&quot; value=&quot;0&quot; th:checked=&quot;${emp!=null}?${emp.gender==0}&quot;&gt;            &lt;label class=&quot;form-check-label&quot;&gt;女&lt;/label&gt;        &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;department&lt;/label&gt;        &lt;!--提交的是部门的id--&gt;        &lt;select class=&quot;form-control&quot; name=&quot;department.id&quot;&gt;            &lt;option th:selected=&quot;${emp!=null}?${dept.id == emp.department.id}&quot; th:value=&quot;${dept.id}&quot; th:each=&quot;dept:${depts}&quot; th:text=&quot;${dept.departmentName}&quot;&gt;1&lt;/option&gt;        &lt;/select&gt;    &lt;/div&gt;    &lt;div class=&quot;form-group&quot;&gt;        &lt;label&gt;Birth&lt;/label&gt;        &lt;input name=&quot;birth&quot; type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;zhangsan&quot; th:value=&quot;${emp!=null}?${#dates.format(emp.birth, &#39;yyyy-MM-dd HH:mm&#39;)}&quot;&gt;    &lt;/div&gt;    &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary&quot; th:text=&quot;${emp!=null}?&#39;修改&#39;:&#39;添加&#39;&quot;&gt;添加&lt;/button&gt;&lt;/form&gt;</code></pre><h3 id="8）、CRUD-员工删除"><a href="#8）、CRUD-员工删除" class="headerlink" title="8）、CRUD-员工删除"></a>8）、CRUD-员工删除</h3><pre><code class="html">&lt;tr th:each=&quot;emp:${emps}&quot;&gt;    &lt;td th:text=&quot;${emp.id}&quot;&gt;&lt;/td&gt;    &lt;td&gt;[[${emp.lastName}]]&lt;/td&gt;    &lt;td th:text=&quot;${emp.email}&quot;&gt;&lt;/td&gt;    &lt;td th:text=&quot;${emp.gender}==0?&#39;女&#39;:&#39;男&#39;&quot;&gt;&lt;/td&gt;    &lt;td th:text=&quot;${emp.department.departmentName}&quot;&gt;&lt;/td&gt;    &lt;td th:text=&quot;${#dates.format(emp.birth, &#39;yyyy-MM-dd HH:mm&#39;)}&quot;&gt;&lt;/td&gt;    &lt;td&gt;        &lt;a class=&quot;btn btn-sm btn-primary&quot; th:href=&quot;@{/emp/}+${emp.id}&quot;&gt;编辑&lt;/a&gt;        &lt;button th:attr=&quot;del_uri=@{/emp/}+${emp.id}&quot; class=&quot;btn btn-sm btn-danger deleteBtn&quot;&gt;删除&lt;/button&gt;    &lt;/td&gt;&lt;/tr&gt;&lt;script&gt;    $(&quot;.deleteBtn&quot;).click(function(){        //删除当前员工的        $(&quot;#deleteEmpForm&quot;).attr(&quot;action&quot;,$(this).attr(&quot;del_uri&quot;)).submit();        return false;    });&lt;/script&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot国际化、登录拦截、CRUD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 内嵌容器个性化配置和外部容器配置及原理</title>
      <link href="/2019/09/19/SpringBoot-%E5%86%85%E5%B5%8C%E5%AE%B9%E5%99%A8%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E5%92%8C%E5%A4%96%E9%83%A8%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%8E%9F%E7%90%86/"/>
      <url>/2019/09/19/SpringBoot-%E5%86%85%E5%B5%8C%E5%AE%B9%E5%99%A8%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E5%92%8C%E5%A4%96%E9%83%A8%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE%E5%8F%8A%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="配置嵌入式Servlet容器"><a href="#配置嵌入式Servlet容器" class="headerlink" title="配置嵌入式Servlet容器"></a>配置嵌入式Servlet容器</h2><p>SpringBoot默认使用Tomcat作为嵌入式的Servlet容器；</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948747402.png" alt></p><p>问题？</p><h3 id="1）、如何定制和修改Servlet容器的相关配置；"><a href="#1）、如何定制和修改Servlet容器的相关配置；" class="headerlink" title="1）、如何定制和修改Servlet容器的相关配置；"></a>1）、如何定制和修改Servlet容器的相关配置；</h3><p>1、修改和server有关的配置（ServerProperties【也是EmbeddedServletContainerCustomizer】）；</p><pre><code class="properties">server.port=8081server.context-path=/crudserver.tomcat.uri-encoding=UTF-8//通用的Servlet容器设置server.xxx//Tomcat的设置server.tomcat.xxx</code></pre><p>2、编写一个<strong>EmbeddedServletContainerCustomizer</strong>：嵌入式的Servlet容器的定制器；来修改Servlet容器的配置</p><pre><code class="java">@Bean  //一定要将这个定制器加入到容器中public EmbeddedServletContainerCustomizer embeddedServletContainerCustomizer(){    return new EmbeddedServletContainerCustomizer() {        //定制嵌入式的Servlet容器相关的规则        @Override        public void customize(ConfigurableEmbeddedServletContainer container) {            container.setPort(8083);        }    };}</code></pre><h3 id="2）、注册Servlet三大组件【Servlet、Filter、Listener】"><a href="#2）、注册Servlet三大组件【Servlet、Filter、Listener】" class="headerlink" title="2）、注册Servlet三大组件【Servlet、Filter、Listener】"></a>2）、注册Servlet三大组件【Servlet、Filter、Listener】</h3><p>由于SpringBoot默认是以jar包的方式启动嵌入式的Servlet容器来启动SpringBoot的web应用，没有web.xml文件。</p><p>注册三大组件用以下方式</p><p>ServletRegistrationBean</p><pre><code class="java">//注册三大组件@Beanpublic ServletRegistrationBean myServlet(){    ServletRegistrationBean registrationBean = new ServletRegistrationBean(new MyServlet(),&quot;/myServlet&quot;);    return registrationBean;}</code></pre><p>FilterRegistrationBean</p><pre><code class="java">@Beanpublic FilterRegistrationBean myFilter(){    FilterRegistrationBean registrationBean = new FilterRegistrationBean();    registrationBean.setFilter(new MyFilter());    registrationBean.setUrlPatterns(Arrays.asList(&quot;/hello&quot;,&quot;/myServlet&quot;));    return registrationBean;}</code></pre><p>ServletListenerRegistrationBean</p><pre><code class="java">@Beanpublic ServletListenerRegistrationBean myListener(){    ServletListenerRegistrationBean&lt;MyListener&gt; registrationBean = new ServletListenerRegistrationBean&lt;&gt;(new MyListener());    return registrationBean;}</code></pre><p>SpringBoot帮我们自动SpringMVC的时候，自动的注册SpringMVC的前端控制器；DIspatcherServlet；</p><p>DispatcherServletAutoConfiguration中：</p><pre><code class="java">@Bean(name = DEFAULT_DISPATCHER_SERVLET_REGISTRATION_BEAN_NAME)@ConditionalOnBean(value = DispatcherServlet.class, name = DEFAULT_DISPATCHER_SERVLET_BEAN_NAME)public ServletRegistrationBean dispatcherServletRegistration(      DispatcherServlet dispatcherServlet) {   ServletRegistrationBean registration = new ServletRegistrationBean(         dispatcherServlet, this.serverProperties.getServletMapping());    //默认拦截： /  所有请求；包静态资源，但是不拦截jsp请求；   /*会拦截jsp    //可以通过server.servletPath来修改SpringMVC前端控制器默认拦截的请求路径   registration.setName(DEFAULT_DISPATCHER_SERVLET_BEAN_NAME);   registration.setLoadOnStartup(         this.webMvcProperties.getServlet().getLoadOnStartup());   if (this.multipartConfig != null) {      registration.setMultipartConfig(this.multipartConfig);   }   return registration;}</code></pre><p>2）、SpringBoot能不能支持其他的Servlet容器；</p><h3 id="3）、替换为其他嵌入式Servlet容器"><a href="#3）、替换为其他嵌入式Servlet容器" class="headerlink" title="3）、替换为其他嵌入式Servlet容器"></a>3）、替换为其他嵌入式Servlet容器</h3><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948715555.png" alt></p><p>默认支持：</p><p>Tomcat（默认使用）</p><pre><code class="xml">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;   引入web模块默认就是使用嵌入式的Tomcat作为Servlet容器；&lt;/dependency&gt;</code></pre><p>Jetty</p><pre><code class="xml">&lt;!-- 引入web模块 --&gt;&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;   &lt;exclusions&gt;      &lt;exclusion&gt;         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;/exclusion&gt;   &lt;/exclusions&gt;&lt;/dependency&gt;&lt;!--引入其他的Servlet容器--&gt;&lt;dependency&gt;   &lt;artifactId&gt;spring-boot-starter-jetty&lt;/artifactId&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;/dependency&gt;</code></pre><p>Undertow</p><pre><code class="xml">&lt;!-- 引入web模块 --&gt;&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;   &lt;exclusions&gt;      &lt;exclusion&gt;         &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;         &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;/exclusion&gt;   &lt;/exclusions&gt;&lt;/dependency&gt;&lt;!--引入其他的Servlet容器--&gt;&lt;dependency&gt;   &lt;artifactId&gt;spring-boot-starter-undertow&lt;/artifactId&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;/dependency&gt;</code></pre><h3 id="4）、嵌入式Servlet容器自动配置原理；"><a href="#4）、嵌入式Servlet容器自动配置原理；" class="headerlink" title="4）、嵌入式Servlet容器自动配置原理；"></a>4）、嵌入式Servlet容器自动配置原理；</h3><p>EmbeddedServletContainerAutoConfiguration：嵌入式的Servlet容器自动配置？</p><pre><code class="java">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)@Configuration@ConditionalOnWebApplication@Import(BeanPostProcessorsRegistrar.class)//导入BeanPostProcessorsRegistrar：Spring注解版；给容器中导入一些组件//导入了EmbeddedServletContainerCustomizerBeanPostProcessor：//后置处理器：bean初始化前后（创建完对象，还没赋值赋值）执行初始化工作public class EmbeddedServletContainerAutoConfiguration {    @Configuration    @ConditionalOnClass({ Servlet.class, Tomcat.class })//判断当前是否引入了Tomcat依赖；    @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)//判断当前容器没有用户自己定义EmbeddedServletContainerFactory：嵌入式的Servlet容器工厂；作用：创建嵌入式的Servlet容器    public static class EmbeddedTomcat {        @Bean        public TomcatEmbeddedServletContainerFactory tomcatEmbeddedServletContainerFactory() {            return new TomcatEmbeddedServletContainerFactory();        }    }    /**     * Nested configuration if Jetty is being used.     */    @Configuration    @ConditionalOnClass({ Servlet.class, Server.class, Loader.class,            WebAppContext.class })    @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)    public static class EmbeddedJetty {        @Bean        public JettyEmbeddedServletContainerFactory jettyEmbeddedServletContainerFactory() {            return new JettyEmbeddedServletContainerFactory();        }    }    /**     * Nested configuration if Undertow is being used.     */    @Configuration    @ConditionalOnClass({ Servlet.class, Undertow.class, SslClientAuthMode.class })    @ConditionalOnMissingBean(value = EmbeddedServletContainerFactory.class, search = SearchStrategy.CURRENT)    public static class EmbeddedUndertow {        @Bean        public UndertowEmbeddedServletContainerFactory undertowEmbeddedServletContainerFactory() {            return new UndertowEmbeddedServletContainerFactory();        }    }</code></pre><p>1）、EmbeddedServletContainerFactory（嵌入式Servlet容器工厂）</p><pre><code class="java">public interface EmbeddedServletContainerFactory {   //获取嵌入式的Servlet容器   EmbeddedServletContainer getEmbeddedServletContainer(         ServletContextInitializer... initializers);}</code></pre><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948645009.png" alt></p><p>2）、EmbeddedServletContainer：（嵌入式的Servlet容器）</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948682495.png" alt></p><p>3）、以<strong>TomcatEmbeddedServletContainerFactory</strong>为例</p><pre><code class="java">@Overridepublic EmbeddedServletContainer getEmbeddedServletContainer(      ServletContextInitializer... initializers) {    //创建一个Tomcat   Tomcat tomcat = new Tomcat();    //配置Tomcat的基本环节   File baseDir = (this.baseDirectory != null ? this.baseDirectory         : createTempDir(&quot;tomcat&quot;));   tomcat.setBaseDir(baseDir.getAbsolutePath());   Connector connector = new Connector(this.protocol);   tomcat.getService().addConnector(connector);   customizeConnector(connector);   tomcat.setConnector(connector);   tomcat.getHost().setAutoDeploy(false);   configureEngine(tomcat.getEngine());   for (Connector additionalConnector : this.additionalTomcatConnectors) {      tomcat.getService().addConnector(additionalConnector);   }   prepareContext(tomcat.getHost(), initializers);    //将配置好的Tomcat传入进去，返回一个EmbeddedServletContainer；并且启动Tomcat服务器   return getTomcatEmbeddedServletContainer(tomcat);}</code></pre><p>4）、我们对嵌入式容器的配置修改是怎么生效？</p><pre><code>ServerProperties、EmbeddedServletContainerCustomizer</code></pre><p><strong>EmbeddedServletContainerCustomizer</strong>：定制器帮我们修改了Servlet容器的配置？</p><p>怎么修改的原理？</p><p>5）、容器中导入了<strong>EmbeddedServletContainerCustomizerBeanPostProcessor</strong></p><pre><code class="java">//初始化之前@Overridepublic Object postProcessBeforeInitialization(Object bean, String beanName)      throws BeansException {    //如果当前初始化的是一个ConfigurableEmbeddedServletContainer类型的组件   if (bean instanceof ConfigurableEmbeddedServletContainer) {       //      postProcessBeforeInitialization((ConfigurableEmbeddedServletContainer) bean);   }   return bean;}private void postProcessBeforeInitialization(            ConfigurableEmbeddedServletContainer bean) {    //获取所有的定制器，调用每一个定制器的customize方法来给Servlet容器进行属性赋值；    for (EmbeddedServletContainerCustomizer customizer : getCustomizers()) {        customizer.customize(bean);    }}private Collection&lt;EmbeddedServletContainerCustomizer&gt; getCustomizers() {    if (this.customizers == null) {        // Look up does not include the parent context        this.customizers = new ArrayList&lt;EmbeddedServletContainerCustomizer&gt;(            this.beanFactory            //从容器中获取所有这葛类型的组件：EmbeddedServletContainerCustomizer            //定制Servlet容器，给容器中可以添加一个EmbeddedServletContainerCustomizer类型的组件            .getBeansOfType(EmbeddedServletContainerCustomizer.class,                            false, false)            .values());        Collections.sort(this.customizers, AnnotationAwareOrderComparator.INSTANCE);        this.customizers = Collections.unmodifiableList(this.customizers);    }    return this.customizers;}ServerProperties也是定制器</code></pre><p>步骤：</p><p>1）、SpringBoot根据导入的依赖情况，给容器中添加相应的EmbeddedServletContainerFactory【TomcatEmbeddedServletContainerFactory】</p><p>2）、容器中某个组件要创建对象就会惊动后置处理器；EmbeddedServletContainerCustomizerBeanPostProcessor；</p><p>只要是嵌入式的Servlet容器工厂，后置处理器就工作；</p><p>3）、后置处理器，从容器中获取所有的<strong>EmbeddedServletContainerCustomizer</strong>，调用定制器的定制方法</p><p>###5）、嵌入式Servlet容器启动原理；</p><p>什么时候创建嵌入式的Servlet容器工厂？什么时候获取嵌入式的Servlet容器并启动Tomcat；</p><p>获取嵌入式的Servlet容器工厂：</p><p>1）、SpringBoot应用启动运行run方法</p><p>2）、refreshContext(context);SpringBoot刷新IOC容器【创建IOC容器对象，并初始化容器，创建容器中的每一个组件】；如果是web应用创建<strong>AnnotationConfigEmbeddedWebApplicationContext</strong>，否则：<strong>AnnotationConfigApplicationContext</strong></p><p>3）、refresh(context);<strong>刷新刚才创建好的ioc容器；</strong></p><pre><code class="java">public void refresh() throws BeansException, IllegalStateException {   synchronized (this.startupShutdownMonitor) {      // Prepare this context for refreshing.      prepareRefresh();      // Tell the subclass to refresh the internal bean factory.      ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();      // Prepare the bean factory for use in this context.      prepareBeanFactory(beanFactory);      try {         // Allows post-processing of the bean factory in context subclasses.         postProcessBeanFactory(beanFactory);         // Invoke factory processors registered as beans in the context.         invokeBeanFactoryPostProcessors(beanFactory);         // Register bean processors that intercept bean creation.         registerBeanPostProcessors(beanFactory);         // Initialize message source for this context.         initMessageSource();         // Initialize event multicaster for this context.         initApplicationEventMulticaster();         // Initialize other special beans in specific context subclasses.         onRefresh();         // Check for listener beans and register them.         registerListeners();         // Instantiate all remaining (non-lazy-init) singletons.         finishBeanFactoryInitialization(beanFactory);         // Last step: publish corresponding event.         finishRefresh();      }      catch (BeansException ex) {         if (logger.isWarnEnabled()) {            logger.warn(&quot;Exception encountered during context initialization - &quot; +                  &quot;cancelling refresh attempt: &quot; + ex);         }         // Destroy already created singletons to avoid dangling resources.         destroyBeans();         // Reset &#39;active&#39; flag.         cancelRefresh(ex);         // Propagate exception to caller.         throw ex;      }      finally {         // Reset common introspection caches in Spring&#39;s core, since we         // might not ever need metadata for singleton beans anymore...         resetCommonCaches();      }   }}</code></pre><p>4）、  onRefresh(); web的ioc容器重写了onRefresh方法</p><p>5）、webioc容器会创建嵌入式的Servlet容器；<strong>createEmbeddedServletContainer</strong>();</p><p><strong>6）、获取嵌入式的Servlet容器工厂：</strong></p><p>EmbeddedServletContainerFactory containerFactory = getEmbeddedServletContainerFactory();</p><p>​    从ioc容器中获取EmbeddedServletContainerFactory 组件；<strong>TomcatEmbeddedServletContainerFactory</strong>创建对象，后置处理器一看是这个对象，就获取所有的定制器来先定制Servlet容器的相关配置；</p><p>7）、<strong>使用容器工厂获取嵌入式的Servlet容器</strong>：this.embeddedServletContainer = containerFactory      .getEmbeddedServletContainer(getSelfInitializer());</p><p>8）、嵌入式的Servlet容器创建对象并启动Servlet容器；</p><p><strong>先启动嵌入式的Servlet容器，再将ioc容器中剩下没有创建出的对象获取出来；</strong></p><p><strong><code>IOC容器启动创建嵌入式的Servlet容器</code></strong></p><h2 id="使用外置的Servlet容器"><a href="#使用外置的Servlet容器" class="headerlink" title="使用外置的Servlet容器"></a>使用外置的Servlet容器</h2><p>嵌入式Servlet容器：应用打成可执行的jar</p><p>​        优点：简单、便携；</p><p>​        缺点：默认不支持JSP、优化定制比较复杂（使用定制器【ServerProperties、自定义EmbeddedServletContainerCustomizer】，自己编写嵌入式Servlet容器的创建工厂【EmbeddedServletContainerFactory】）；</p><p>外置的Servlet容器：外面安装Tomcat—应用war包的方式打包；</p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1）、必须创建一个war项目；（利用idea创建好目录结构）</p><p>2）、将嵌入式的Tomcat指定为provided；</p><pre><code class="xml">&lt;dependency&gt;   &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;   &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;   &lt;scope&gt;provided&lt;/scope&gt;&lt;/dependency&gt;</code></pre><p>3）、必须编写一个<strong>SpringBootServletInitializer</strong>的子类，并调用configure方法</p><pre><code class="java">public class ServletInitializer extends SpringBootServletInitializer {   @Override   protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {       //传入SpringBoot应用的主程序      return application.sources(SpringBoot04WebJspApplication.class);   }}</code></pre><p>4）、启动服务器就可以使用；</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>jar包：执行SpringBoot主类的main方法，启动ioc容器，创建嵌入式的Servlet容器；</p><p>war包：启动服务器，<strong>服务器启动SpringBoot应用</strong>【SpringBootServletInitializer】，启动ioc容器；</p><p>servlet3.0（Spring注解版）：</p><p>8.2.4 Shared libraries / runtimes pluggability：</p><p>规则：</p><p>​    1）、服务器启动（web应用启动）会创建当前web应用里面每一个jar包里面ServletContainerInitializer实例：</p><p>​    2）、ServletContainerInitializer的实现放在jar包的META-INF/services文件夹下，有一个名为javax.servlet.ServletContainerInitializer的文件，内容就是ServletContainerInitializer的实现类的全类名</p><p>​    3）、还可以使用@HandlesTypes，在应用启动的时候加载我们感兴趣的类；</p><p>流程：</p><p>1）、启动Tomcat</p><p>2）、org\springframework\spring-web\4.3.14.RELEASE\spring-web-4.3.14.RELEASE.jar!\META-INF\services\javax.servlet.ServletContainerInitializer：</p><p>Spring的web模块里面有这个文件：<strong>org.springframework.web.SpringServletContainerInitializer</strong></p><p>3）、SpringServletContainerInitializer将@HandlesTypes(WebApplicationInitializer.class)标注的所有这个类型的类都传入到onStartup方法的Set&lt;Class&lt;?&gt;&gt;；为这些WebApplicationInitializer类型的类创建实例；</p><p>4）、每一个WebApplicationInitializer都调用自己的onStartup；</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948799385.png" alt></p><p>5）、相当于我们的SpringBootServletInitializer的类会被创建对象，并执行onStartup方法</p><p>6）、SpringBootServletInitializer实例执行onStartup的时候会createRootApplicationContext；创建容器</p><pre><code class="java">protected WebApplicationContext createRootApplicationContext(      ServletContext servletContext) {    //1、创建SpringApplicationBuilder   SpringApplicationBuilder builder = createSpringApplicationBuilder();   StandardServletEnvironment environment = new StandardServletEnvironment();   environment.initPropertySources(servletContext, null);   builder.environment(environment);   builder.main(getClass());   ApplicationContext parent = getExistingRootWebApplicationContext(servletContext);   if (parent != null) {      this.logger.info(&quot;Root context already created (using as parent).&quot;);      servletContext.setAttribute(            WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, null);      builder.initializers(new ParentContextApplicationContextInitializer(parent));   }   builder.initializers(         new ServletContextApplicationContextInitializer(servletContext));   builder.contextClass(AnnotationConfigEmbeddedWebApplicationContext.class);    //调用configure方法，子类重写了这个方法，将SpringBoot的主程序类传入了进来   builder = configure(builder);    //使用builder创建一个Spring应用   SpringApplication application = builder.build();   if (application.getSources().isEmpty() &amp;&amp; AnnotationUtils         .findAnnotation(getClass(), Configuration.class) != null) {      application.getSources().add(getClass());   }   Assert.state(!application.getSources().isEmpty(),         &quot;No SpringApplication sources have been defined. Either override the &quot;               + &quot;configure method or add an @Configuration annotation&quot;);   // Ensure error pages are registered   if (this.registerErrorPageFilter) {      application.getSources().add(ErrorPageFilterConfiguration.class);   }    //启动Spring应用   return run(application);}</code></pre><p>7）、Spring的应用就启动并且创建IOC容器</p><pre><code class="java">public ConfigurableApplicationContext run(String... args) {   StopWatch stopWatch = new StopWatch();   stopWatch.start();   ConfigurableApplicationContext context = null;   FailureAnalyzers analyzers = null;   configureHeadlessProperty();   SpringApplicationRunListeners listeners = getRunListeners(args);   listeners.starting();   try {      ApplicationArguments applicationArguments = new DefaultApplicationArguments(            args);      ConfigurableEnvironment environment = prepareEnvironment(listeners,            applicationArguments);      Banner printedBanner = printBanner(environment);      context = createApplicationContext();      analyzers = new FailureAnalyzers(context);      prepareContext(context, environment, listeners, applicationArguments,            printedBanner);       //刷新IOC容器      refreshContext(context);      afterRefresh(context, applicationArguments);      listeners.finished(context, null);      stopWatch.stop();      if (this.logStartupInfo) {         new StartupInfoLogger(this.mainApplicationClass)               .logStarted(getApplicationLog(), stopWatch);      }      return context;   }   catch (Throwable ex) {      handleRunFailure(context, listeners, analyzers, ex);      throw new IllegalStateException(ex);   }}</code></pre><p><strong><code>启动Servlet容器，再启动SpringBoot应用</code></strong></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot内嵌容器个性化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot 错误响应个性化配置</title>
      <link href="/2019/09/19/SpringBoot-%E9%94%99%E8%AF%AF%E5%93%8D%E5%BA%94%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/19/SpringBoot-%E9%94%99%E8%AF%AF%E5%93%8D%E5%BA%94%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="错误处理机制"><a href="#错误处理机制" class="headerlink" title="错误处理机制"></a>错误处理机制</h2><h3 id="1）、SpringBoot默认的错误处理机制"><a href="#1）、SpringBoot默认的错误处理机制" class="headerlink" title="1）、SpringBoot默认的错误处理机制"></a>1）、SpringBoot默认的错误处理机制</h3><p>默认效果：</p><p>​        1）、浏览器，返回一个默认的错误页面</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948114840.png" alt></p><p>  浏览器发送请求的请求头：</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948143704.png" alt></p><p>​        2）、如果是其他客户端，默认响应一个json数据</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948182712.png" alt></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948210772.png" alt></p><p>原理：</p><p>​    可以参照ErrorMvcAutoConfiguration；错误处理的自动配置；</p><pre><code>  给容器中添加了以下组件</code></pre><p>​    1、DefaultErrorAttributes：</p><pre><code class="java">帮我们在页面共享信息；@Override    public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes,            boolean includeStackTrace) {        Map&lt;String, Object&gt; errorAttributes = new LinkedHashMap&lt;String, Object&gt;();        errorAttributes.put(&quot;timestamp&quot;, new Date());        addStatus(errorAttributes, requestAttributes);        addErrorDetails(errorAttributes, requestAttributes, includeStackTrace);        addPath(errorAttributes, requestAttributes);        return errorAttributes;    }</code></pre><p>​    2、BasicErrorController：处理默认/error请求</p><pre><code class="java">@Controller@RequestMapping(&quot;${server.error.path:${error.path:/error}}&quot;)public class BasicErrorController extends AbstractErrorController {    @RequestMapping(produces = &quot;text/html&quot;)//产生html类型的数据；浏览器发送的请求来到这个方法处理    public ModelAndView errorHtml(HttpServletRequest request,            HttpServletResponse response) {        HttpStatus status = getStatus(request);        Map&lt;String, Object&gt; model = Collections.unmodifiableMap(getErrorAttributes(                request, isIncludeStackTrace(request, MediaType.TEXT_HTML)));        response.setStatus(status.value());        //去哪个页面作为错误页面；包含页面地址和页面内容        ModelAndView modelAndView = resolveErrorView(request, response, status, model);        return (modelAndView == null ? new ModelAndView(&quot;error&quot;, model) : modelAndView);    }    @RequestMapping    @ResponseBody    //产生json数据，其他客户端来到这个方法处理；    public ResponseEntity&lt;Map&lt;String, Object&gt;&gt; error(HttpServletRequest request) {        Map&lt;String, Object&gt; body = getErrorAttributes(request,                isIncludeStackTrace(request, MediaType.ALL));        HttpStatus status = getStatus(request);        return new ResponseEntity&lt;Map&lt;String, Object&gt;&gt;(body, status);    }</code></pre><p>​    3、ErrorPageCustomizer：</p><pre><code class="java">    @Value(&quot;${error.path:/error}&quot;)    private String path = &quot;/error&quot;;  系统出现错误以后来到error请求进行处理；（web.xml注册的错误页面规则）</code></pre><p>​    4、DefaultErrorViewResolver：</p><pre><code class="java">@Override    public ModelAndView resolveErrorView(HttpServletRequest request, HttpStatus status,            Map&lt;String, Object&gt; model) {        ModelAndView modelAndView = resolve(String.valueOf(status), model);        if (modelAndView == null &amp;&amp; SERIES_VIEWS.containsKey(status.series())) {            modelAndView = resolve(SERIES_VIEWS.get(status.series()), model);        }        return modelAndView;    }    private ModelAndView resolve(String viewName, Map&lt;String, Object&gt; model) {        //默认SpringBoot可以去找到一个页面？  error/404        String errorViewName = &quot;error/&quot; + viewName;        //模板引擎可以解析这个页面地址就用模板引擎解析        TemplateAvailabilityProvider provider = this.templateAvailabilityProviders                .getProvider(errorViewName, this.applicationContext);        if (provider != null) {            //模板引擎可用的情况下返回到errorViewName指定的视图地址            return new ModelAndView(errorViewName, model);        }        //模板引擎不可用，就在静态资源文件夹下找errorViewName对应的页面   error/404.html        return resolveResource(errorViewName, model);    }</code></pre><p>​    步骤：</p><p>​        一但系统出现4xx或者5xx之类的错误；ErrorPageCustomizer就会生效（定制错误的响应规则）；就会来到/error请求；就会被<strong>BasicErrorController</strong>处理；</p><p>​        1）响应页面；去哪个页面是由<strong>DefaultErrorViewResolver</strong>解析得到的；</p><pre><code class="java">protected ModelAndView resolveErrorView(HttpServletRequest request,      HttpServletResponse response, HttpStatus status, Map&lt;String, Object&gt; model) {    //所有的ErrorViewResolver得到ModelAndView   for (ErrorViewResolver resolver : this.errorViewResolvers) {      ModelAndView modelAndView = resolver.resolveErrorView(request, status, model);      if (modelAndView != null) {         return modelAndView;      }   }   return null;}</code></pre><h3 id="2）、如果定制错误响应："><a href="#2）、如果定制错误响应：" class="headerlink" title="2）、如果定制错误响应："></a>2）、如果定制错误响应：</h3><h4 id="1）、如何定制错误的页面；"><a href="#1）、如何定制错误的页面；" class="headerlink" title="1）、如何定制错误的页面；"></a><strong>1）、如何定制错误的页面；</strong></h4><p>​            <strong>1）、有模板引擎的情况下；error/状态码;</strong> 【将错误页面命名为  错误状态码.html 放在模板引擎文件夹里面的 error文件夹下】，发生此状态码的错误就会来到  对应的页面；</p><p>​            我们可以使用4xx和5xx作为错误页面的文件名来匹配这种类型的所有错误，精确优先（优先寻找精确的状态码.html）；        </p><p>​            页面能获取的信息；</p><p>​                timestamp：时间戳</p><p>​                status：状态码</p><p>​                error：错误提示</p><p>​                exception：异常对象</p><p>​                message：异常消息</p><p>​                errors：JSR303数据校验的错误都在这里</p><p>​            2）、没有模板引擎（模板引擎找不到这个错误页面），静态资源文件夹下找；</p><p>​            3）、以上都没有错误页面，就是默认来到SpringBoot默认的错误提示页面；</p><h4 id="2）、如何定制错误的json数据；"><a href="#2）、如何定制错误的json数据；" class="headerlink" title="2）、如何定制错误的json数据；"></a>2）、如何定制错误的json数据；</h4><p>​        1）、自定义异常处理&amp;返回定制json数据；</p><pre><code class="java">@ControllerAdvicepublic class MyExceptionHandler {    @ResponseBody    @ExceptionHandler(UserNotExistException.class)    public Map&lt;String,Object&gt; handleException(Exception e){        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        map.put(&quot;code&quot;,&quot;user.notexist&quot;);        map.put(&quot;message&quot;,e.getMessage());        return map;    }}//没有自适应效果...</code></pre><p>​        2）、转发到/error进行自适应响应效果处理</p><pre><code class="java"> @ExceptionHandler(UserNotExistException.class)    public String handleException(Exception e, HttpServletRequest request){        Map&lt;String,Object&gt; map = new HashMap&lt;&gt;();        //传入我们自己的错误状态码  4xx 5xx，否则就不会进入定制错误页面的解析流程        /**         * Integer statusCode = (Integer) request         .getAttribute(&quot;javax.servlet.error.status_code&quot;);         */        request.setAttribute(&quot;javax.servlet.error.status_code&quot;,500);        map.put(&quot;code&quot;,&quot;user.notexist&quot;);        map.put(&quot;message&quot;,e.getMessage());        //转发到/error        return &quot;forward:/error&quot;;    }</code></pre><h4 id="3）、将我们的定制数据携带出去；"><a href="#3）、将我们的定制数据携带出去；" class="headerlink" title="3）、将我们的定制数据携带出去；"></a>3）、将我们的定制数据携带出去；</h4><p>出现错误以后，会来到/error请求，会被BasicErrorController处理，响应出去可以获取的数据是由getErrorAttributes得到的（是AbstractErrorController（ErrorController）规定的方法）；</p><p>​    1、完全来编写一个ErrorController的实现类【或者是编写AbstractErrorController的子类】，放在容器中；</p><p>​    2、页面上能用的数据，或者是json返回能用的数据都是通过errorAttributes.getErrorAttributes得到；</p><p>​            容器中DefaultErrorAttributes.getErrorAttributes()；默认进行数据处理的；</p><p>自定义ErrorAttributes</p><pre><code class="java">//给容器中加入我们自己定义的ErrorAttributes@Componentpublic class MyErrorAttributes extends DefaultErrorAttributes {    @Override    public Map&lt;String, Object&gt; getErrorAttributes(RequestAttributes requestAttributes, boolean includeStackTrace) {        Map&lt;String, Object&gt; map = super.getErrorAttributes(requestAttributes, includeStackTrace);        map.put(&quot;company&quot;,&quot;atguigu&quot;);        return map;    }}</code></pre><p>最终的效果：响应是自适应的，可以通过定制ErrorAttributes改变需要返回的内容，</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568948276956.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot订制错误响应 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot SpringMVC个性化配置</title>
      <link href="/2019/09/19/SpringBoot-SpringMVC%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/19/SpringBoot-SpringMVC%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringMVC自动配置"><a href="#SpringMVC自动配置" class="headerlink" title="SpringMVC自动配置"></a>SpringMVC自动配置</h1><p><a href="https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/1.5.10.RELEASE/reference/htmlsingle/#boot-features-developing-web-applications</a></p><h3 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h3><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong><code>（WebMvcAutoConfiguration）</code></strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li><code>如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；</code></li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p><p>​</p></li><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><pre><code class="java">        @Bean        @ConditionalOnProperty(prefix = &quot;spring.mvc&quot;, name = &quot;date-format&quot;)//在文件中配置日期格式化的规则        public Formatter&lt;Date&gt; dateFormatter() {            return new DateFormatter(this.mvcProperties.getDateFormat());//日期格式化组件        }</code></pre><p>​    <code>自己添加的格式化器转换器，我们只需要放在容器中即可</code></p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p><code>自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）</code></p><p>​</p></li></ul></li><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p><code>我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）</code></p><pre><code>初始化WebDataBinder；请求数据=====JavaBean；</code></pre></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="2、扩展SpringMVC"><a href="#2、扩展SpringMVC" class="headerlink" title="2、扩展SpringMVC"></a>2、扩展SpringMVC</h3><pre><code class="xml">    &lt;mvc:view-controller path=&quot;/hello&quot; view-name=&quot;success&quot;/&gt;    &lt;mvc:interceptors&gt;        &lt;mvc:interceptor&gt;            &lt;mvc:mapping path=&quot;/hello&quot;/&gt;            &lt;bean&gt;&lt;/bean&gt;        &lt;/mvc:interceptor&gt;    &lt;/mvc:interceptors&gt;</code></pre><p><strong><code>编写一个配置类（@Configuration），是WebMvcConfigurerAdapter类型；不能标注@EnableWebMvc</code></strong>;</p><p>既保留了所有的自动配置，也能用我们扩展的配置；</p><pre><code class="java">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter {    @Override    public void addViewControllers(ViewControllerRegistry registry) {       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    }}</code></pre><p>原理：</p><p>​    1）、WebMvcAutoConfiguration是SpringMVC的自动配置类</p><p>​    2）、在做其他自动配置时会导入；@Import(<strong>EnableWebMvcConfiguration</strong>.class)</p><pre><code class="java">    @Configuration    public static class EnableWebMvcConfiguration extends DelegatingWebMvcConfiguration {      private final WebMvcConfigurerComposite configurers = new WebMvcConfigurerComposite();     //从容器中获取所有的WebMvcConfigurer      @Autowired(required = false)      public void setConfigurers(List&lt;WebMvcConfigurer&gt; configurers) {          if (!CollectionUtils.isEmpty(configurers)) {              this.configurers.addWebMvcConfigurers(configurers);                //一个参考实现；将所有的WebMvcConfigurer相关配置都来一起调用；                  @Override             // public void addViewControllers(ViewControllerRegistry registry) {              //    for (WebMvcConfigurer delegate : this.delegates) {               //       delegate.addViewControllers(registry);               //   }              }          }    }</code></pre><p>​    3）、容器中所有的WebMvcConfigurer都会一起起作用；</p><p>​    4）、我们的配置类也会被调用；</p><p>​    效果：SpringMVC的自动配置和我们的扩展配置都会起作用；</p><h3 id="3、全面接管SpringMVC；"><a href="#3、全面接管SpringMVC；" class="headerlink" title="3、全面接管SpringMVC；"></a>3、全面接管SpringMVC；</h3><p>SpringBoot对SpringMVC的自动配置不需要了，所有都是我们自己配置；所有的SpringMVC的自动配置都失效了</p><p><strong>我们需要在配置类中添加@EnableWebMvc即可；</strong></p><pre><code class="java">//使用WebMvcConfigurerAdapter可以来扩展SpringMVC的功能@EnableWebMvc@Configurationpublic class MyMvcConfig extends WebMvcConfigurerAdapter {    @Override    public void addViewControllers(ViewControllerRegistry registry) {       // super.addViewControllers(registry);        //浏览器发送 /atguigu 请求来到 success        registry.addViewController(&quot;/atguigu&quot;).setViewName(&quot;success&quot;);    }}</code></pre><p>原理：</p><p>为什么@EnableWebMvc自动配置就失效了；</p><p>1）@EnableWebMvc的核心</p><pre><code class="java">@Import(DelegatingWebMvcConfiguration.class)public @interface EnableWebMvc {</code></pre><p>2）、</p><pre><code class="java">@Configurationpublic class DelegatingWebMvcConfiguration extends WebMvcConfigurationSupport {</code></pre><p>3）、</p><pre><code class="java">@Configuration@ConditionalOnWebApplication@ConditionalOnClass({ Servlet.class, DispatcherServlet.class,        WebMvcConfigurerAdapter.class })//容器中没有这个组件的时候，这个自动配置类才生效@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)@AutoConfigureAfter({ DispatcherServletAutoConfiguration.class,        ValidationAutoConfiguration.class })public class WebMvcAutoConfiguration {</code></pre><p>4）、@EnableWebMvc将WebMvcConfigurationSupport组件导入进来；</p><p>5）、导入的WebMvcConfigurationSupport只是SpringMVC最基本的功能；</p><h2 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h2><p>模式：</p><p>​    1）、SpringBoot在自动配置很多组件的时候，先看容器中有没有用户自己配置的（@Bean、@Component）如果有就用用户配置的，如果没有，才自动配置；如果有些组件可以有多个（ViewResolver）将用户配置的和自己默认的组合起来；</p><p>​    2）、在SpringBoot中会有非常多的xxxConfigurer帮助我们进行扩展配置</p><p>​    3）、在SpringBoot中会有很多的xxxCustomizer帮助我们进行定制配置</p>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot MVC配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot模板引擎Thymeleaf</title>
      <link href="/2019/09/19/SpringBoot%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EThymeleaf/"/>
      <url>/2019/09/19/SpringBoot%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8EThymeleaf/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringBoot对静态资源的映射规则；"><a href="#SpringBoot对静态资源的映射规则；" class="headerlink" title="SpringBoot对静态资源的映射规则；"></a>SpringBoot对静态资源的映射规则；</h2><pre><code class="java">@ConfigurationProperties(prefix = &quot;spring.resources&quot;, ignoreUnknownFields = false)public class ResourceProperties implements ResourceLoaderAware {  //可以设置和静态资源有关的参数，缓存时间等</code></pre><pre><code class="java">    WebMvcAuotConfiguration：        @Override        public void addResourceHandlers(ResourceHandlerRegistry registry) {            if (!this.resourceProperties.isAddMappings()) {                logger.debug(&quot;Default resource handling disabled&quot;);                return;            }            Integer cachePeriod = this.resourceProperties.getCachePeriod();            if (!registry.hasMappingForPattern(&quot;/webjars/**&quot;)) {                customizeResourceHandlerRegistration(                        registry.addResourceHandler(&quot;/webjars/**&quot;)                                .addResourceLocations(                                        &quot;classpath:/META-INF/resources/webjars/&quot;)                        .setCachePeriod(cachePeriod));            }            String staticPathPattern = this.mvcProperties.getStaticPathPattern();              //静态资源文件夹映射            if (!registry.hasMappingForPattern(staticPathPattern)) {                customizeResourceHandlerRegistration(                        registry.addResourceHandler(staticPathPattern)                                .addResourceLocations(                                        this.resourceProperties.getStaticLocations())                        .setCachePeriod(cachePeriod));            }        }        //配置欢迎页映射        @Bean        public WelcomePageHandlerMapping welcomePageHandlerMapping(                ResourceProperties resourceProperties) {            return new WelcomePageHandlerMapping(resourceProperties.getWelcomePage(),                    this.mvcProperties.getStaticPathPattern());        }       //配置喜欢的图标        @Configuration        @ConditionalOnProperty(value = &quot;spring.mvc.favicon.enabled&quot;, matchIfMissing = true)        public static class FaviconConfiguration {            private final ResourceProperties resourceProperties;            public FaviconConfiguration(ResourceProperties resourceProperties) {                this.resourceProperties = resourceProperties;            }            @Bean            public SimpleUrlHandlerMapping faviconHandlerMapping() {                SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();                mapping.setOrder(Ordered.HIGHEST_PRECEDENCE + 1);                  //所有  **/favicon.ico                 mapping.setUrlMap(Collections.singletonMap(&quot;**/favicon.ico&quot;,                        faviconRequestHandler()));                return mapping;            }            @Bean            public ResourceHttpRequestHandler faviconRequestHandler() {                ResourceHttpRequestHandler requestHandler = new ResourceHttpRequestHandler();                requestHandler                        .setLocations(this.resourceProperties.getFaviconLocations());                return requestHandler;            }        }</code></pre><p><code>1）、所有 /webjars/** ，都去 classpath:/META-INF/resources/webjars/ 找资源；</code></p><p>​    webjars：以jar包的方式引入静态资源；</p><p><a href="http://www.webjars.org/" target="_blank" rel="noopener">http://www.webjars.org/</a></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568946151923.png" alt></p><p>localhost:8080/webjars/jquery/3.3.1/jquery.js</p><pre><code class="xml">&lt;!--引入jquery-webjar--&gt;在访问的时候只需要写webjars下面资源的名称即可        &lt;dependency&gt;            &lt;groupId&gt;org.webjars&lt;/groupId&gt;            &lt;artifactId&gt;jquery&lt;/artifactId&gt;            &lt;version&gt;3.3.1&lt;/version&gt;        &lt;/dependency&gt;</code></pre><p><code>2）、&quot;/**&quot; 访问当前项目的任何资源，都去（静态资源的文件夹）找映射</code></p><pre><code>&quot;classpath:/META-INF/resources/&quot;, &quot;classpath:/resources/&quot;,&quot;classpath:/static/&quot;, &quot;classpath:/public/&quot; &quot;/&quot;：当前项目的根路径</code></pre><p>localhost:8080/abc ===  去静态资源文件夹里面找abc</p><p><code>3）、欢迎页； 静态资源文件夹下的所有index.html页面；被&quot;/**&quot;映射；</code></p><p>​    localhost:8080/   找index页面</p><p><code>4）、所有的 **/favicon.ico  都是在静态资源文件下找；</code></p><h2 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h2><p>JSP、Velocity、Freemarker、Thymeleaf</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568946194561.png" alt></p><p>SpringBoot推荐的Thymeleaf；</p><p>语法更简单，功能更强大；</p><h3 id="1、引入thymeleaf；"><a href="#1、引入thymeleaf；" class="headerlink" title="1、引入thymeleaf；"></a>1、引入thymeleaf；</h3><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;              2.1.6        &lt;/dependency&gt;切换thymeleaf版本&lt;properties&gt;        &lt;thymeleaf.version&gt;3.0.9.RELEASE&lt;/thymeleaf.version&gt;        &lt;!-- 布局功能的支持程序  thymeleaf3主程序  layout2以上版本 --&gt;        &lt;!-- thymeleaf2   layout1--&gt;        &lt;thymeleaf-layout-dialect.version&gt;2.2.2&lt;/thymeleaf-layout-dialect.version&gt;  &lt;/properties&gt;</code></pre><h3 id="2、Thymeleaf使用"><a href="#2、Thymeleaf使用" class="headerlink" title="2、Thymeleaf使用"></a>2、Thymeleaf使用</h3><pre><code class="java">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)public class ThymeleafProperties {    private static final Charset DEFAULT_ENCODING = Charset.forName(&quot;UTF-8&quot;);    private static final MimeType DEFAULT_CONTENT_TYPE = MimeType.valueOf(&quot;text/html&quot;);    public static final String DEFAULT_PREFIX = &quot;classpath:/templates/&quot;;    public static final String DEFAULT_SUFFIX = &quot;.html&quot;;      //</code></pre><p>只要我们把HTML页面放在classpath:/templates/，thymeleaf就能自动渲染；</p><p>使用：</p><p>1、导入thymeleaf的名称空间</p><pre><code class="xml">&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></pre><p>2、使用thymeleaf语法；</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot; xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Title&lt;/title&gt;&lt;/head&gt;&lt;body&gt;    &lt;h1&gt;成功！&lt;/h1&gt;    &lt;!--th:text 将div里面的文本内容设置为 --&gt;    &lt;div th:text=&quot;${hello}&quot;&gt;这是显示欢迎信息&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h3><p>1）、th:text；改变当前元素里面的文本内容；</p><p>​    th：任意html属性；来替换原生属性的值</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568946254072.png" alt></p><p>2）、表达式？</p><pre><code class="properties">Simple expressions:（表达式语法）    Variable Expressions: ${...}：获取变量值；OGNL；            1）、获取对象的属性、调用方法            2）、使用内置的基本对象：                #ctx : the context object.                #vars: the context variables.                #locale : the context locale.                #request : (only in Web Contexts) the HttpServletRequest object.                #response : (only in Web Contexts) the HttpServletResponse object.                #session : (only in Web Contexts) the HttpSession object.                #servletContext : (only in Web Contexts) the ServletContext object.                ${session.foo}            3）、内置的一些工具对象：#execInfo : information about the template being processed.#messages : methods for obtaining externalized messages inside variables expressions, in the same way as they would be obtained using #{…} syntax.#uris : methods for escaping parts of URLs/URIs#conversions : methods for executing the configured conversion service (if any).#dates : methods for java.util.Date objects: formatting, component extraction, etc.#calendars : analogous to #dates , but for java.util.Calendar objects.#numbers : methods for formatting numeric objects.#strings : methods for String objects: contains, startsWith, prepending/appending, etc.#objects : methods for objects in general.#bools : methods for boolean evaluation.#arrays : methods for arrays.#lists : methods for lists.#sets : methods for sets.#maps : methods for maps.#aggregates : methods for creating aggregates on arrays or collections.#ids : methods for dealing with id attributes that might be repeated (for example, as a result of an iteration).    Selection Variable Expressions: *{...}：选择表达式：和${}在功能上是一样；        补充：配合 th:object=&quot;${session.user}：   &lt;div th:object=&quot;${session.user}&quot;&gt;    &lt;p&gt;Name: &lt;span th:text=&quot;*{firstName}&quot;&gt;Sebastian&lt;/span&gt;.&lt;/p&gt;    &lt;p&gt;Surname: &lt;span th:text=&quot;*{lastName}&quot;&gt;Pepper&lt;/span&gt;.&lt;/p&gt;    &lt;p&gt;Nationality: &lt;span th:text=&quot;*{nationality}&quot;&gt;Saturn&lt;/span&gt;.&lt;/p&gt;    &lt;/div&gt;    Message Expressions: #{...}：获取国际化内容    Link URL Expressions: @{...}：定义URL；            @{/order/process(execId=${execId},execType=&#39;FAST&#39;)}    Fragment Expressions: ~{...}：片段引用表达式            &lt;div th:insert=&quot;~{commons :: main}&quot;&gt;...&lt;/div&gt;Literals（字面量）      Text literals: &#39;one text&#39; , &#39;Another one!&#39; ,…      Number literals: 0 , 34 , 3.0 , 12.3 ,…      Boolean literals: true , false      Null literal: null      Literal tokens: one , sometext , main ,…Text operations:（文本操作）    String concatenation: +    Literal substitutions: |The name is ${name}|Arithmetic operations:（数学运算）    Binary operators: + , - , * , / , %    Minus sign (unary operator): -Boolean operations:（布尔运算）    Binary operators: and , or    Boolean negation (unary operator): ! , notComparisons and equality:（比较运算）    Comparators: &gt; , &lt; , &gt;= , &lt;= ( gt , lt , ge , le )    Equality operators: == , != ( eq , ne )Conditional operators:条件运算（三元运算符）    If-then: (if) ? (then)    If-then-else: (if) ? (then) : (else)    Default: (value) ?: (defaultvalue)Special tokens:    No-Operation: _ </code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Thymeleaf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot静态资源映射规则</title>
      <link href="/2019/09/19/SpringBoot%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/"/>
      <url>/2019/09/19/SpringBoot%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%98%A0%E5%B0%84%E8%A7%84%E5%88%99/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot日志</title>
      <link href="/2019/09/18/SpringBoot%E6%97%A5%E5%BF%97/"/>
      <url>/2019/09/18/SpringBoot%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<h1 id="一、日志"><a href="#一、日志" class="headerlink" title="一、日志"></a>一、日志</h1><h2 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h2><p> 小张；开发一个大型系统；</p><p>​        1、System.out.println(“”)；将关键数据打印在控制台；去掉？写在一个文件？</p><p>​        2、框架来记录系统的一些运行时信息；日志框架 ；  zhanglogging.jar；</p><p>​        3、高大上的几个功能？异步模式？自动归档？xxxx？  zhanglogging-good.jar？</p><p>​        4、将以前框架卸下来？换上新的框架，重新修改之前相关的API；zhanglogging-prefect.jar；</p><p>​        5、JDBC—数据库驱动；</p><p>​            写了一个统一的接口层；日志门面（日志的一个抽象层）；logging-abstract.jar；</p><p>​            给项目中导入具体的日志实现就行了；我们之前的日志框架都是实现的抽象层；</p><p><strong>市面上的日志框架；</strong></p><p>JUL、JCL、Jboss-logging、logback、log4j、log4j2、slf4j….</p><table><thead><tr><th>日志门面  （日志的抽象层）</th><th>日志实现</th></tr></thead><tbody><tr><td><del>JCL（Jakarta  Commons Logging）</del>    SLF4j（Simple  Logging Facade for Java）    <strong><del>jboss-logging</del></strong></td><td>Log4j  JUL（java.util.logging）  Log4j2  <strong>Logback</strong></td></tr></tbody></table><p>左边选一个门面（抽象层）、右边来选一个实现；</p><p>日志门面：  SLF4J；</p><p>日志实现：Logback；</p><p>SpringBoot：底层是Spring框架，Spring框架默认是用JCL；‘</p><p>​    <strong><code>SpringBoot选用 SLF4j和logback；</code></strong></p><h2 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h2><h3 id="1、如何在系统中使用SLF4j-https-www-slf4j-org"><a href="#1、如何在系统中使用SLF4j-https-www-slf4j-org" class="headerlink" title="1、如何在系统中使用SLF4j   https://www.slf4j.org"></a>1、如何在系统中使用SLF4j   <a href="https://www.slf4j.org" target="_blank" rel="noopener">https://www.slf4j.org</a></h3><p>以后开发的时候，日志记录方法的调用，不应该来直接调用日志的实现类，而是调用日志抽象层里面的方法；</p><p>给系统里面导入slf4j的jar和  logback的实现jar</p><pre><code class="java">import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class HelloWorld {  public static void main(String[] args) {    Logger logger = LoggerFactory.getLogger(HelloWorld.class);    logger.info(&quot;Hello World&quot;);  }}</code></pre><p>图示；</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793803754.png" alt></p><p>每一个日志的实现框架都有自己的配置文件。使用slf4j以后，<strong>配置文件还是做成日志实现框架自己本身的配置文件；</strong></p><h3 id="2、遗留问题"><a href="#2、遗留问题" class="headerlink" title="2、遗留问题"></a>2、遗留问题</h3><p>a（slf4j+logback）: Spring（commons-logging）、Hibernate（jboss-logging）、MyBatis、xxxx</p><p>统一日志记录，即使是别的框架和我一起统一使用slf4j进行输出？</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793845888.png" alt></p><p><strong>如何让系统中所有的日志都统一到slf4j；</strong></p><p><code>1、将系统中其他日志框架先排除出去；</code></p><p><code>2、用中间包来替换原有的日志框架；</code></p><p><code>3、我们导入slf4j其他的实现</code></p><h2 id="3、SpringBoot日志关系"><a href="#3、SpringBoot日志关系" class="headerlink" title="3、SpringBoot日志关系"></a>3、SpringBoot日志关系</h2><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><p>SpringBoot使用它来做日志功能；</p><pre><code class="xml">    &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;        &lt;/dependency&gt;</code></pre><p>底层依赖关系</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793937505.png" alt></p><p>总结：</p><p>​    1）、SpringBoot底层也是使用slf4j+logback的方式进行日志记录</p><p>​    2）、SpringBoot也把其他的日志都替换成了slf4j；</p><p>​    3）、中间替换包？</p><pre><code class="java">@SuppressWarnings(&quot;rawtypes&quot;)public abstract class LogFactory {    static String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = &quot;http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j&quot;;    static LogFactory logFactory = new SLF4JLogFactory();</code></pre><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793979284.png" alt></p><p>​    4）、如果我们要引入其他框架？一定要把这个框架的默认日志依赖移除掉？</p><p>​            Spring框架用的是commons-logging；</p><pre><code class="xml">        &lt;dependency&gt;            &lt;groupId&gt;org.springframework&lt;/groupId&gt;            &lt;artifactId&gt;spring-core&lt;/artifactId&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;groupId&gt;commons-logging&lt;/groupId&gt;                    &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;</code></pre><p><strong><code>SpringBoot能自动适配所有的日志，而且底层使用slf4j+logback的方式记录日志，引入其他框架的时候，只需要把这个框架依赖的日志框架排除掉即可；</code></strong></p><h2 id="4、日志使用；"><a href="#4、日志使用；" class="headerlink" title="4、日志使用；"></a>4、日志使用；</h2><h3 id="1、默认配置"><a href="#1、默认配置" class="headerlink" title="1、默认配置"></a>1、默认配置</h3><p>SpringBoot默认帮我们配置好了日志；</p><pre><code class="java">    //记录器    Logger logger = LoggerFactory.getLogger(getClass());    @Test    public void contextLoads() {        //System.out.println();        //日志的级别；        //由低到高   trace&lt;debug&lt;info&lt;warn&lt;error        //可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效        logger.trace(&quot;这是trace日志...&quot;);        logger.debug(&quot;这是debug日志...&quot;);        //SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别        logger.info(&quot;这是info日志...&quot;);        logger.warn(&quot;这是warn日志...&quot;);        logger.error(&quot;这是error日志...&quot;);    }</code></pre><pre><code>    日志输出格式：        %d表示日期时间，        %thread表示线程名，        %-5level：级别从左显示5个字符宽度        %logger{50} 表示logger名字最长50个字符，否则按照句点分割。         %msg：日志消息，        %n是换行符    --&gt;    %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</code></pre><p>SpringBoot修改日志的默认配置</p><pre><code class="properties">logging.level.com.atguigu=trace#logging.path=# 不指定路径在当前项目下生成springboot.log日志# 可以指定完整的路径；#logging.file=G:/springboot.log# 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用 spring.log 作为默认文件logging.path=/spring/log#  在控制台输出的日志的格式logging.pattern.console=%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n# 指定文件中日志输出的格式logging.pattern.file=%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n</code></pre><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h3 id="2、指定配置"><a href="#2、指定配置" class="headerlink" title="2、指定配置"></a>2、指定配置</h3><p>给类路径下放上每个日志框架自己的配置文件即可；SpringBoot就不使用他默认配置的了</p><table><thead><tr><th>Logging System</th><th>Customization</th></tr></thead><tbody><tr><td>Logback</td><td><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code> or <code>logback.groovy</code></td></tr><tr><td>Log4j2</td><td><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td>JDK (Java Util Logging)</td><td><code>logging.properties</code></td></tr></tbody></table><p>logback.xml：直接就被日志框架识别了；</p><p><strong>logback-spring.xml</strong>：日志框架就不直接加载日志的配置项，由SpringBoot解析日志配置，可以使用SpringBoot的高级Profile功能</p><pre><code class="xml">&lt;springProfile name=&quot;staging&quot;&gt;    &lt;!-- configuration to be enabled when the &quot;staging&quot; profile is active --&gt;      可以指定某段配置只在某个环境下生效&lt;/springProfile&gt;</code></pre><p>如：</p><pre><code class="xml">&lt;appender name=&quot;stdout&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;        &lt;!--        日志输出格式：            %d表示日期时间，            %thread表示线程名，            %-5level：级别从左显示5个字符宽度            %logger{50} 表示logger名字最长50个字符，否则按照句点分割。             %msg：日志消息，            %n是换行符        --&gt;        &lt;layout class=&quot;ch.qos.logback.classic.PatternLayout&quot;&gt;            &lt;springProfile name=&quot;dev&quot;&gt;                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} ----&gt; [%thread] ---&gt; %-5level %logger{50} - %msg%n&lt;/pattern&gt;            &lt;/springProfile&gt;            &lt;springProfile name=&quot;!dev&quot;&gt;                &lt;pattern&gt;%d{yyyy-MM-dd HH:mm:ss.SSS} ==== [%thread] ==== %-5level %logger{50} - %msg%n&lt;/pattern&gt;            &lt;/springProfile&gt;        &lt;/layout&gt;    &lt;/appender&gt;</code></pre><p>如果使用logback.xml作为日志配置文件，还要使用profile功能，会有以下错误</p><p> <code>no applicable action for [springProfile]</code></p><h2 id="5、切换日志框架"><a href="#5、切换日志框架" class="headerlink" title="5、切换日志框架"></a>5、切换日志框架</h2><p>可以按照slf4j的日志适配图，进行相关的切换；</p><p>slf4j+log4j的方式；</p><pre><code class="xml">&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;  &lt;exclusions&gt;    &lt;exclusion&gt;      &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;      &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;    &lt;/exclusion&gt;    &lt;exclusion&gt;      &lt;artifactId&gt;log4j-over-slf4j&lt;/artifactId&gt;      &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;/exclusion&gt;  &lt;/exclusions&gt;&lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>切换为log4j2</p><pre><code class="xml">   &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;            &lt;exclusions&gt;                &lt;exclusion&gt;                    &lt;artifactId&gt;spring-boot-starter-logging&lt;/artifactId&gt;                    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;/exclusion&gt;            &lt;/exclusions&gt;        &lt;/dependency&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-starter-log4j2&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><hr>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置</title>
      <link href="/2019/09/18/SpringBoot%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/18/SpringBoot%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="一、配置文件"><a href="#一、配置文件" class="headerlink" title="一、配置文件"></a>一、配置文件</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><p>SpringBoot使用一个全局的配置文件，配置文件名是固定的；</p><p>•application.properties</p><p>•application.yml</p><p>配置文件的作用：修改SpringBoot自动配置的默认值；SpringBoot在底层都给我们自动配置好；</p><p>YAML（YAML Ain’t Markup Language）</p><p>​    YAML  A Markup Language：是一个标记语言</p><p>​    YAML   isn’t Markup Language：不是一个标记语言；</p><p>标记语言：</p><p>​    以前的配置文件；大多都使用的是  <strong>xxxx.xml</strong>文件；</p><p>​    YAML：<strong>以数据为中心</strong>，比json、xml等更适合做配置文件；</p><p>​    YAML：配置例子</p><pre><code class="yaml">server:  port: 8081</code></pre><p>​    XML：</p><pre><code class="xml">&lt;server&gt;    &lt;port&gt;8081&lt;/port&gt;&lt;/server&gt;</code></pre><h2 id="2、YAML语法："><a href="#2、YAML语法：" class="headerlink" title="2、YAML语法："></a>2、YAML语法：</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k:(空格)v：表示一对键值对（空格必须有）；</p><p>以<strong>空格</strong>的缩进来控制层级关系；只要是左对齐的一列数据，都是同一个层级的</p><pre><code class="yaml">server:    port: 8081    path: /hello</code></pre><p>属性和值也是大小写敏感；</p><h3 id="2、值的写法"><a href="#2、值的写法" class="headerlink" title="2、值的写法"></a>2、值的写法</h3><h4 id="字面量：普通的值（数字，字符串，布尔）"><a href="#字面量：普通的值（数字，字符串，布尔）" class="headerlink" title="字面量：普通的值（数字，字符串，布尔）"></a>字面量：普通的值（数字，字符串，布尔）</h4><p>​    k: v：字面直接来写；</p><p>​        字符串默认不用加上单引号或者双引号；</p><p>​        “”：双引号；不会转义字符串里面的特殊字符；特殊字符会作为本身想表示的意思</p><p>​                name:   “zhangsan \n lisi”：输出；zhangsan 换行  lisi</p><p>​        ‘’：单引号；会转义特殊字符，特殊字符最终只是一个普通的字符串数据</p><p>​                name:   ‘zhangsan \n lisi’：输出；zhangsan \n  lisi</p><h4 id="对象、Map（属性和值）（键值对）："><a href="#对象、Map（属性和值）（键值对）：" class="headerlink" title="对象、Map（属性和值）（键值对）："></a>对象、Map（属性和值）（键值对）：</h4><p>​    k: v：在下一行来写对象的属性和值的关系；注意缩进</p><p>​        对象还是k: v的方式</p><pre><code class="yaml">friends:        lastName: zhangsan        age: 20</code></pre><p>行内写法：</p><pre><code class="yaml">friends: {lastName: zhangsan,age: 18}</code></pre><h4 id="数组（List、Set）："><a href="#数组（List、Set）：" class="headerlink" title="数组（List、Set）："></a>数组（List、Set）：</h4><p>用- 值表示数组中的一个元素</p><pre><code class="yaml">pets: - cat - dog - pig</code></pre><p>行内写法</p><pre><code class="yaml">pets: [cat,dog,pig]</code></pre><h2 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h2><p>配置文件</p><pre><code class="yaml">person:    lastName: hello    age: 18    boss: false    birth: 2017/12/12    maps: {k1: v1,k2: 12}    lists:      - lisi      - zhaoliu    dog:      name: 小狗      age: 12</code></pre><p>javaBean：</p><pre><code class="java">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； * */@Component@ConfigurationProperties(prefix = &quot;person&quot;)public class Person {    private String lastName;    private Integer age;    private Boolean boss;    private Date birth;    private Map&lt;String,Object&gt; maps;    private List&lt;Object&gt; lists;    private Dog dog;</code></pre><p>我们可以导入配置文件处理器，以后编写配置就有提示了</p><pre><code class="xml">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;            &lt;optional&gt;true&lt;/optional&gt;        &lt;/dependency&gt;</code></pre><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><p>调整</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793620711.png" alt="idea配置乱码"></p><h4 id="2、-Value获取值和-ConfigurationProperties获取值比较"><a href="#2、-Value获取值和-ConfigurationProperties获取值比较" class="headerlink" title="2、@Value获取值和@ConfigurationProperties获取值比较"></a>2、@Value获取值和@ConfigurationProperties获取值比较</h4><table><thead><tr><th></th><th>@ConfigurationProperties</th><th>@Value</th></tr></thead><tbody><tr><td>功能</td><td>批量注入配置文件中的属性</td><td>一个个指定</td></tr><tr><td>松散绑定（松散语法）</td><td>支持</td><td>不支持</td></tr><tr><td>SpEL</td><td>不支持</td><td>支持</td></tr><tr><td>JSR303数据校验</td><td>支持</td><td>不支持</td></tr><tr><td>复杂类型封装</td><td>支持</td><td>不支持</td></tr></tbody></table><p>配置文件yml还是properties他们都能获取到值；</p><p>如果说，我们只是在某个业务逻辑中需要获取一下配置文件中的某项值，使用@Value；</p><p>如果说，我们专门编写了一个javaBean来和配置文件进行映射，我们就直接使用@ConfigurationProperties；</p><h4 id="3、配置文件注入值数据校验"><a href="#3、配置文件注入值数据校验" class="headerlink" title="3、配置文件注入值数据校验"></a>3、配置文件注入值数据校验</h4><pre><code class="java">@Component@ConfigurationProperties(prefix = &quot;person&quot;)@Validatedpublic class Person {    /**     * &lt;bean class=&quot;Person&quot;&gt;     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值/#{SpEL}&quot;&gt;&lt;/property&gt;     * &lt;bean/&gt;     */   //lastName必须是邮箱格式    @Email    //@Value(&quot;${person.last-name}&quot;)    private String lastName;    //@Value(&quot;#{11*2}&quot;)    private Integer age;    //@Value(&quot;true&quot;)    private Boolean boss;    private Date birth;    private Map&lt;String,Object&gt; maps;    private List&lt;Object&gt; lists;    private Dog dog;</code></pre><h4 id="4、-PropertySource-amp-ImportResource-amp-Bean"><a href="#4、-PropertySource-amp-ImportResource-amp-Bean" class="headerlink" title="4、@PropertySource&amp;@ImportResource&amp;@Bean"></a>4、@PropertySource&amp;@ImportResource&amp;@Bean</h4><p>@<strong>PropertySource</strong>：加载指定的配置文件；</p><pre><code class="java">/** * 将配置文件中配置的每一个属性的值，映射到这个组件中 * @ConfigurationProperties：告诉SpringBoot将本类中的所有属性和配置文件中相关的配置进行绑定； *      prefix = &quot;person&quot;：配置文件中哪个下面的所有属性进行一一映射 * * 只有这个组件是容器中的组件，才能容器提供的@ConfigurationProperties功能； *  @ConfigurationProperties(prefix = &quot;person&quot;)默认从全局配置文件中获取值； * */@PropertySource(value = {&quot;classpath:person.properties&quot;})@Component@ConfigurationProperties(prefix = &quot;person&quot;)//@Validatedpublic class Person {    /**     * &lt;bean class=&quot;Person&quot;&gt;     *      &lt;property name=&quot;lastName&quot; value=&quot;字面量/${key}从环境变量、配置文件中获取值/#{SpEL}&quot;&gt;&lt;/property&gt;     * &lt;bean/&gt;     */   //lastName必须是邮箱格式   // @Email    //@Value(&quot;${person.last-name}&quot;)    private String lastName;    //@Value(&quot;#{11*2}&quot;)    private Integer age;    //@Value(&quot;true&quot;)    private Boolean boss;</code></pre><p>@<strong>ImportResource</strong>：导入Spring的配置文件，让配置文件里面的内容生效；</p><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别；</p><p>想让Spring的配置文件生效，加载进来；@<strong>ImportResource</strong>标注在一个配置类上</p><pre><code class="java">@ImportResource(locations = {&quot;classpath:beans.xml&quot;})导入Spring的配置文件让其生效</code></pre><p>不来编写Spring的配置文件</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;       xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;       xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;    &lt;bean id=&quot;helloService&quot; class=&quot;com.atguigu.springboot.service.HelloService&quot;&gt;&lt;/bean&gt;&lt;/beans&gt;</code></pre><p>SpringBoot推荐给容器中添加组件的方式；推荐使用全注解的方式</p><p>1、配置类<strong>@Configuration</strong>——&gt;Spring配置文件</p><p>2、使用<strong>@Bean</strong>给容器中添加组件</p><pre><code class="java">/** * @Configuration：指明当前类是一个配置类；就是来替代之前的Spring配置文件 * * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件 * */@Configurationpublic class MyAppConfig {    //将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名    @Bean    public HelloService helloService02(){        System.out.println(&quot;配置类@Bean给容器中添加组件了...&quot;);        return new HelloService();    }}</code></pre><p>##4、配置文件占位符</p><h3 id="1、随机数"><a href="#1、随机数" class="headerlink" title="1、随机数"></a>1、随机数</h3><pre><code class="java">${random.value}、${random.int}、${random.long}${random.int(10)}、${random.int[1024,65536]}</code></pre><h3 id="2、占位符获取之前配置的值，如果没有可以是用-指定默认值"><a href="#2、占位符获取之前配置的值，如果没有可以是用-指定默认值" class="headerlink" title="2、占位符获取之前配置的值，如果没有可以是用:指定默认值"></a>2、占位符获取之前配置的值，如果没有可以是用:指定默认值</h3><pre><code class="properties">person.last-name=张三${random.uuid}person.age=${random.int}person.birth=2017/12/15person.boss=falseperson.maps.k1=v1person.maps.k2=14person.lists=a,b,cperson.dog.name=${person.hello:hello}_dogperson.dog.age=15</code></pre><h2 id="5、Profile"><a href="#5、Profile" class="headerlink" title="5、Profile"></a>5、Profile</h2><h3 id="1、多Profile文件"><a href="#1、多Profile文件" class="headerlink" title="1、多Profile文件"></a>1、多Profile文件</h3><p>我们在主配置文件编写的时候，文件名可以是   application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h3 id="2、yml支持多文档块方式"><a href="#2、yml支持多文档块方式" class="headerlink" title="2、yml支持多文档块方式"></a>2、yml支持多文档块方式</h3><pre><code class="yml">server:  port: 8081spring:  profiles:    active: prod---server:  port: 8083spring:  profiles: dev---server:  port: 8084spring:  profiles: prod  #指定属于哪个环境</code></pre><h3 id="3、激活指定profile"><a href="#3、激活指定profile" class="headerlink" title="3、激活指定profile"></a>3、激活指定profile</h3><p>​    1、在配置文件中指定  spring.profiles.active=dev</p><p>​    2、命令行：</p><p>​        java -jar spring-boot-02-config-0.0.1-SNAPSHOT.jar –spring.profiles.active=dev；</p><p>​        可以直接在测试的时候，配置传入命令行参数</p><p>​    3、虚拟机参数；</p><p>​        -Dspring.profiles.active=dev</p><h2 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h2><p>springboot 启动会扫描以下位置的application.properties或者application.yml文件作为Spring boot的默认配置文件</p><p>–file:./config/</p><p>–file:./</p><p>–classpath:/config/</p><p>–classpath:/</p><p>优先级由高到底，高优先级的配置会覆盖低优先级的配置；</p><p>SpringBoot会从这四个位置全部加载主配置文件；<strong>互补配置</strong>；</p><p><code>我们还可以通过spring.config.location来改变默认的配置文件位置</code></p><p><strong>项目打包好以后，我们可以使用命令行参数的形式，启动项目的时候来指定配置文件的新位置；指定配置文件和默认加载的这些配置文件共同起作用形成互补配置；</strong></p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –spring.config.location=G:/application.properties</p><h2 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h2><p><strong><code>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</code></strong></p><p><strong>1.命令行参数</strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p><code>**由jar包外向jar包内进行寻找；**</code></p><p><code>**优先加载带profile**</code></p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><code>**再来加载不带profile**</code></p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">参考官方文档</a></p><h2 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h2><p>配置文件到底能写什么？怎么写？自动配置原理；</p><p><a href="https://docs.spring.io/spring-boot/docs/1.5.9.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><h3 id="1、自动配置原理："><a href="#1、自动配置原理：" class="headerlink" title="1、自动配置原理："></a>1、<strong>自动配置原理：</strong></h3><p>1）、SpringBoot启动的时候加载主配置类，开启了自动配置功能 <code>@EnableAutoConfiguration</code></p><p><strong>2）、@EnableAutoConfiguration 作用：</strong></p><ul><li>利用EnableAutoConfigurationImportSelector给容器中导入一些组件？</li></ul><ul><li><p>可以查看selectImports()方法的内容；</p></li><li><p>List<string> configurations = getCandidateConfigurations(annotationMetadata,      attributes);获取候选的配置</string></p><ul><li><pre><code class="java">SpringFactoriesLoader.loadFactoryNames()扫描所有jar包类路径下  META-INF/spring.factories把扫描到的这些文件的内容包装成properties对象从properties中获取到EnableAutoConfiguration.class类（类名）对应的值，然后把他们添加在容器中</code></pre><p>​</p></li></ul></li></ul><p><strong><code>将 类路径下  META-INF/spring.factories 里面配置的所有EnableAutoConfiguration的值加入到了容器中；</code></strong></p><pre><code class="properties"># Auto Configureorg.springframework.boot.autoconfigure.EnableAutoConfiguration=\org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration,\org.springframework.boot.autoconfigure.aop.AopAutoConfiguration,\org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration,\org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration,\org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration,\org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration,\org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration,\org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.context.MessageSourceAutoConfiguration,\org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration,\org.springframework.boot.autoconfigure.couchbase.CouchbaseAutoConfiguration,\org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.couchbase.CouchbaseRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.ldap.LdapRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jDataAutoConfiguration,\org.springframework.boot.autoconfigure.data.neo4j.Neo4jRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration,\org.springframework.boot.autoconfigure.data.redis.RedisRepositoriesAutoConfiguration,\org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration,\org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration,\org.springframework.boot.autoconfigure.elasticsearch.jest.JestAutoConfiguration,\org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration,\org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration,\org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration,\org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration,\org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration,\org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration,\org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration,\org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JdbcTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration,\org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration,\org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration,\org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration,\org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration,\org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration,\org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration,\org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration,\org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration,\org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.embedded.EmbeddedLdapAutoConfiguration,\org.springframework.boot.autoconfigure.ldap.LdapAutoConfiguration,\org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration,\org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration,\org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration,\org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration,\org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration,\org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration,\org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration,\org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration,\org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration,\org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration,\org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration,\org.springframework.boot.autoconfigure.session.SessionAutoConfiguration,\org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration,\org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration,\org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration,\org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration,\org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration,\org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration,\org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration,\org.springframework.boot.autoconfigure.validation.ValidationAutoConfiguration,\org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration,\org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration,\org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration,\org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration,\org.springframework.boot.autoconfigure.web.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration,\org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration,\org.springframework.boot.autoconfigure.webservices.WebServicesAutoConfiguration</code></pre><p>每一个这样的  xxxAutoConfiguration类都是容器中的一个组件，都加入到容器中；用他们来做自动配置；</p><p>3）、每一个自动配置类进行自动配置功能；</p><p>4）、以<strong>HttpEncodingAutoConfiguration（Http编码自动配置）</strong>为例解释自动配置原理；</p><pre><code class="java">@Configuration   //表示这是一个配置类，以前编写的配置文件一样，也可以给容器中添加组件@EnableConfigurationProperties(HttpEncodingProperties.class)  //启动指定类的ConfigurationProperties功能；将配置文件中对应的值和HttpEncodingProperties绑定起来；并把HttpEncodingProperties加入到ioc容器中@ConditionalOnWebApplication //Spring底层@Conditional注解（Spring注解版），根据不同的条件，如果满足指定的条件，整个配置类里面的配置就会生效；    判断当前应用是否是web应用，如果是，当前配置类生效@ConditionalOnClass(CharacterEncodingFilter.class)  //判断当前项目有没有这个类CharacterEncodingFilter；SpringMVC中进行乱码解决的过滤器；@ConditionalOnProperty(prefix = &quot;spring.http.encoding&quot;, value = &quot;enabled&quot;, matchIfMissing = true)  //判断配置文件中是否存在某个配置  spring.http.encoding.enabled；如果不存在，判断也是成立的//即使我们配置文件中不配置pring.http.encoding.enabled=true，也是默认生效的；public class HttpEncodingAutoConfiguration {      //他已经和SpringBoot的配置文件映射了      private final HttpEncodingProperties properties;   //只有一个有参构造器的情况下，参数的值就会从容器中拿      public HttpEncodingAutoConfiguration(HttpEncodingProperties properties) {        this.properties = properties;    }    @Bean   //给容器中添加一个组件，这个组件的某些值需要从properties中获取    @ConditionalOnMissingBean(CharacterEncodingFilter.class) //判断容器没有这个组件？    public CharacterEncodingFilter characterEncodingFilter() {        CharacterEncodingFilter filter = new OrderedCharacterEncodingFilter();        filter.setEncoding(this.properties.getCharset().name());        filter.setForceRequestEncoding(this.properties.shouldForce(Type.REQUEST));        filter.setForceResponseEncoding(this.properties.shouldForce(Type.RESPONSE));        return filter;    }</code></pre><p>根据当前不同的条件判断，决定这个配置类是否生效？</p><p>一但这个配置类生效；这个配置类就会给容器中添加各种组件；这些组件的属性是从对应的properties类中获取的，这些类里面的每一个属性又是和配置文件绑定的；</p><p>5）、所有在配置文件中能配置的属性都是在xxxxProperties类中封装者‘；配置文件能配置什么就可以参照某个功能对应的这个属性类</p><pre><code class="java">@ConfigurationProperties(prefix = &quot;spring.http.encoding&quot;)  //从配置文件中获取指定的值和bean的属性进行绑定public class HttpEncodingProperties {   public static final Charset DEFAULT_CHARSET = Charset.forName(&quot;UTF-8&quot;);</code></pre><p><strong>精髓：</strong></p><p>​    <strong>1）、SpringBoot启动会加载大量的自动配置类</strong></p><p>​    <strong>2）、我们看我们需要的功能有没有SpringBoot默认写好的自动配置类；</strong></p><p>​    <strong>3）、我们再来看这个自动配置类中到底配置了哪些组件；（只要我们要用的组件有，我们就不需要再来配置了）</strong></p><p>​    <strong>4）、给容器中自动配置类添加组件的时候，会从properties类中获取某些属性。我们就可以在配置文件中指定这些属性的值；</strong></p><p>xxxxAutoConfigurartion：自动配置类；</p><p>给容器中添加组件</p><p>xxxxProperties:封装配置文件中相关属性；</p><h3 id="2、细节"><a href="#2、细节" class="headerlink" title="2、细节"></a>2、细节</h3><h4 id="1、-Conditional派生注解（Spring注解版原生的-Conditional作用）"><a href="#1、-Conditional派生注解（Spring注解版原生的-Conditional作用）" class="headerlink" title="1、@Conditional派生注解（Spring注解版原生的@Conditional作用）"></a>1、@Conditional派生注解（Spring注解版原生的@Conditional作用）</h4><p>作用：必须是@Conditional指定的条件成立，才给容器中添加组件，配置配里面的所有内容才生效；</p><table><thead><tr><th>@Conditional扩展注解</th><th>作用（判断是否满足当前指定条件）</th></tr></thead><tbody><tr><td>@ConditionalOnJava</td><td>系统的java版本是否符合要求</td></tr><tr><td>@ConditionalOnBean</td><td>容器中存在指定Bean；</td></tr><tr><td>@ConditionalOnMissingBean</td><td>容器中不存在指定Bean；</td></tr><tr><td>@ConditionalOnExpression</td><td>满足SpEL表达式指定</td></tr><tr><td>@ConditionalOnClass</td><td>系统中有指定的类</td></tr><tr><td>@ConditionalOnMissingClass</td><td>系统中没有指定的类</td></tr><tr><td>@ConditionalOnSingleCandidate</td><td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td></tr><tr><td>@ConditionalOnProperty</td><td>系统中指定的属性是否有指定的值</td></tr><tr><td>@ConditionalOnResource</td><td>类路径下是否存在指定资源文件</td></tr><tr><td>@ConditionalOnWebApplication</td><td>当前是web环境</td></tr><tr><td>@ConditionalOnNotWebApplication</td><td>当前不是web环境</td></tr><tr><td>@ConditionalOnJndi</td><td>JNDI存在指定项</td></tr></tbody></table><p><strong>自动配置类必须在一定的条件下才能生效；</strong></p><p>我们怎么知道哪些自动配置类生效；</p><p><strong><code>我们可以通过启用  debug=true属性；来让控制台打印自动配置报告</code></strong>，这样我们就可以很方便的知道哪些自动配置类生效；</p><pre><code class="java">=========================AUTO-CONFIGURATION REPORT=========================Positive matches:（自动配置类启用的）-----------------   DispatcherServletAutoConfiguration matched:      - @ConditionalOnClass found required class &#39;org.springframework.web.servlet.DispatcherServlet&#39;; @ConditionalOnMissingClass did not find unwanted class (OnClassCondition)      - @ConditionalOnWebApplication (required) found StandardServletEnvironment (OnWebApplicationCondition)Negative matches:（没有启动，没有匹配成功的自动配置类）-----------------   ActiveMQAutoConfiguration:      Did not match:         - @ConditionalOnClass did not find required classes &#39;javax.jms.ConnectionFactory&#39;, &#39;org.apache.activemq.ActiveMQConnectionFactory&#39; (OnClassCondition)   AopAutoConfiguration:      Did not match:         - @ConditionalOnClass did not find required classes &#39;org.aspectj.lang.annotation.Aspect&#39;, &#39;org.aspectj.lang.reflect.Advice&#39; (OnClassCondition)</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot入门HelloWorld搭建</title>
      <link href="/2019/09/18/SpringBoot%E5%85%A5%E9%97%A8HelloWorld%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/09/18/SpringBoot%E5%85%A5%E9%97%A8HelloWorld%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="一、Spring-Boot-入门Helloworld搭建"><a href="#一、Spring-Boot-入门Helloworld搭建" class="headerlink" title="一、Spring Boot 入门Helloworld搭建"></a><strong>一、</strong>Spring Boot 入门Helloworld搭建</h1><h2 id="1、Spring-Boot-简介"><a href="#1、Spring-Boot-简介" class="headerlink" title="1、Spring Boot 简介"></a>1、Spring Boot 简介</h2><blockquote><p>简化Spring应用开发的一个框架；</p><p>整个Spring技术栈的一个大整合；</p><p>J2EE开发的一站式解决方案；</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>2014，martin fowler</p><p>微服务：架构风格（服务微化）</p><p>一个应用应该是一组小型服务；可以通过HTTP的方式进行互通；</p><p>单体应用：ALL IN ONE</p><p>微服务：每一个功能元素最终都是一个可独立替换和独立升级的软件单元；</p><p><a href="https://martinfowler.com/articles/microservices.html#MicroservicesAndSoa" target="_blank" rel="noopener">详细参照微服务文档</a></p><h2 id="3、环境准备"><a href="#3、环境准备" class="headerlink" title="3、环境准备"></a>3、环境准备</h2><p><a href="http://www.gulixueyuan.com/" target="_blank" rel="noopener">http://www.gulixueyuan.com/</a> 谷粒学院</p><p>环境约束</p><p>–jdk1.8：Spring Boot 推荐jdk1.7及以上；java version “1.8.0_112”</p><p>–maven3.x：maven 3.3以上版本；Apache Maven 3.3.9</p><p>–IntelliJIDEA2017：IntelliJ IDEA 2017.2.2 x64、STS</p><p>–SpringBoot 1.5.9.RELEASE：1.5.9；</p><p>统一环境；</p><h3 id="1、MAVEN设置；"><a href="#1、MAVEN设置；" class="headerlink" title="1、MAVEN设置；"></a>1、MAVEN设置；</h3><p>给maven 的settings.xml配置文件的profiles标签添加</p><pre><code class="xml">&lt;profile&gt;  &lt;id&gt;jdk-1.8&lt;/id&gt;  &lt;activation&gt;    &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;    &lt;jdk&gt;1.8&lt;/jdk&gt;  &lt;/activation&gt;  &lt;properties&gt;    &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;    &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;    &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;  &lt;/properties&gt;&lt;/profile&gt;</code></pre><h3 id="2、IDEA设置"><a href="#2、IDEA设置" class="headerlink" title="2、IDEA设置"></a>2、IDEA设置</h3><p>整合maven进来；</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793230754.png" alt="idea设置">)</p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793279539.png" alt="enter description here"></p><h2 id="4、Spring-Boot-HelloWorld"><a href="#4、Spring-Boot-HelloWorld" class="headerlink" title="4、Spring Boot HelloWorld"></a>4、Spring Boot HelloWorld</h2><p>一个功能：</p><p>浏览器发送hello请求，服务器接受请求并处理，响应Hello World字符串；</p><h3 id="1、创建一个maven工程；（jar）"><a href="#1、创建一个maven工程；（jar）" class="headerlink" title="1、创建一个maven工程；（jar）"></a>1、创建一个maven工程；（jar）</h3><h3 id="2、导入spring-boot相关的依赖"><a href="#2、导入spring-boot相关的依赖" class="headerlink" title="2、导入spring boot相关的依赖"></a>2、导入spring boot相关的依赖</h3><pre><code class="xml">    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;    &lt;/parent&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;</code></pre><h3 id="3、编写一个主程序；启动Spring-Boot应用"><a href="#3、编写一个主程序；启动Spring-Boot应用" class="headerlink" title="3、编写一个主程序；启动Spring Boot应用"></a>3、编写一个主程序；启动Spring Boot应用</h3><pre><code class="java">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */@SpringBootApplicationpublic class HelloWorldMainApplication {    public static void main(String[] args) {        // Spring应用启动起来        SpringApplication.run(HelloWorldMainApplication.class,args);    }}</code></pre><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><pre><code class="java">@Controllerpublic class HelloController {    @ResponseBody    @RequestMapping(&quot;/hello&quot;)    public String hello(){        return &quot;Hello World!&quot;;    }}</code></pre><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><pre><code class="xml"> &lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;</code></pre><p>将这个应用打成jar包，直接使用java -jar的命令进行执行；</p><h2 id="5、Hello-World探究"><a href="#5、Hello-World探究" class="headerlink" title="5、Hello World探究"></a>5、Hello World探究</h2><h3 id="1、POM文件"><a href="#1、POM文件" class="headerlink" title="1、POM文件"></a>1、POM文件</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><pre><code class="xml">&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt;他的父项目是&lt;parent&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;  &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;  &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;&lt;/parent&gt;他来真正管理Spring Boot应用里面的所有依赖版本；</code></pre><p>Spring Boot的版本仲裁中心；</p><p>以后我们导入依赖默认是不需要写版本；（没有在dependencies里面管理的依赖自然需要声明版本号）</p><h4 id="2、启动器"><a href="#2、启动器" class="headerlink" title="2、启动器"></a>2、启动器</h4><pre><code class="xml">&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p><strong>spring-boot-starter</strong>-<code>web</code>：</p><p>​    spring-boot-starter：spring-boot场景启动器；帮我们导入了web模块正常运行所依赖的组件；</p><p>Spring Boot将所有的功能场景都抽取出来，做成一个个的starters（启动器），只需要在项目里面引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器</p><h3 id="2、主程序类，主入口类"><a href="#2、主程序类，主入口类" class="headerlink" title="2、主程序类，主入口类"></a>2、主程序类，主入口类</h3><pre><code class="java">/** *  @SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */@SpringBootApplicationpublic class HelloWorldMainApplication {    public static void main(String[] args) {        // Spring应用启动起来        SpringApplication.run(HelloWorldMainApplication.class,args);    }}</code></pre><p>@<strong>SpringBootApplication</strong>:    Spring Boot应用标注在某个类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用；</p><pre><code class="java">@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = {      @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),      @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })public @interface SpringBootApplication {</code></pre><p>@<strong>SpringBootConfiguration</strong>:Spring Boot的配置类；</p><p>​        标注在某个类上，表示这是一个Spring Boot的配置类；</p><p>​        @<strong>Configuration</strong>:配置类上来标注这个注解；</p><p>​            配置类 —–  配置文件；配置类也是容器中的一个组件；@Component</p><p>@<strong>EnableAutoConfiguration</strong>：开启自动配置功能；</p><p>​        以前我们需要配置的东西，Spring Boot帮我们自动配置；@<strong>EnableAutoConfiguration</strong>告诉SpringBoot开启自动配置功能；这样自动配置才能生效；</p><pre><code class="java">@AutoConfigurationPackage@Import(EnableAutoConfigurationImportSelector.class)public @interface EnableAutoConfiguration {</code></pre><p>​          @<strong>AutoConfigurationPackage</strong>：自动配置包</p><p>​        @<strong>Import</strong>(AutoConfigurationPackages.Registrar.class)：</p><p>​        Spring的底层注解@Import，给容器中导入一个组件；导入的组件由AutoConfigurationPackages.Registrar.class；</p><p><code>将主配置类（@SpringBootApplication标注的类）的所在包及下面所有子包里面的所有组件扫描到Spring容器;</code></p><p>​    @<strong>Import</strong>(EnableAutoConfigurationImportSelector.class)；</p><p>​        给容器中导入组件？</p><p>​        <strong>EnableAutoConfigurationImportSelector</strong>：导入哪些组件的选择器；</p><p>​        将所有需要导入的组件以全类名的方式返回；这些组件就会被添加到容器中；</p><p>​        会给容器中导入非常多的自动配置类（xxxAutoConfiguration）；就是给容器中导入这个场景需要的所有组件，并配置好这些组件；        <img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568793366283.png" alt="自动配置类"></p><p>有了自动配置类，免去了我们手动编写配置注入功能组件等的工作；</p><p>​        SpringFactoriesLoader.loadFactoryNames(EnableAutoConfiguration.class,classLoader)；</p><p><code>Spring Boot在启动的时候从类路径下的META-INF/spring.factories中获取EnableAutoConfiguration指定的值，将这些值作为自动配置类导入到容器中，自动配置类就生效，帮我们进行自动配置工作；</code>以前我们需要自己配置的东西，自动配置类都帮我们；</p><p>J2EE的整体整合解决方案和自动配置都在spring-boot-autoconfigure-1.5.9.RELEASE.jar；</p><p>​</p><h2 id="6、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#6、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="6、使用Spring Initializer快速创建Spring Boot项目"></a>6、使用Spring Initializer快速创建Spring Boot项目</h2><h3 id="1、IDEA：使用-Spring-Initializer快速创建项目"><a href="#1、IDEA：使用-Spring-Initializer快速创建项目" class="headerlink" title="1、IDEA：使用 Spring Initializer快速创建项目"></a>1、IDEA：使用 Spring Initializer快速创建项目</h3><p>IDE都支持使用Spring的项目创建向导快速创建一个Spring Boot项目；</p><p>选择我们需要的模块；向导会联网创建Spring Boot项目；</p><p>默认生成的Spring Boot项目；</p><ul><li>主程序已经生成好了，我们只需要我们自己的逻辑</li><li>resources文件夹中目录结构<ul><li>static：保存所有的静态资源； js css  images；</li><li>templates：保存所有的模板页面；（Spring Boot默认jar包使用嵌入式的Tomcat，默认不支持JSP页面）；可以使用模板引擎（freemarker、thymeleaf）；</li><li>application.properties：Spring Boot应用的配置文件；可以修改一些默认设置；</li></ul></li></ul><h3 id="2、STS使用-Spring-Starter-Project快速创建项目"><a href="#2、STS使用-Spring-Starter-Project快速创建项目" class="headerlink" title="2、STS使用 Spring Starter Project快速创建项目"></a>2、STS使用 Spring Starter Project快速创建项目</h3><h3 id="使用SpringBoot；"><a href="#使用SpringBoot；" class="headerlink" title="使用SpringBoot；"></a>使用SpringBoot；</h3><p><strong>1）、创建SpringBoot应用，选中我们需要的模块；</strong></p><p><strong>2）、SpringBoot已经默认将这些场景配置好了，只需要在配置文件中指定少量配置就可以运行起来</strong></p><p><strong>3）、自己编写业务代码；</strong></p><p><strong>自动配置原理？</strong></p><p>这个场景SpringBoot帮我们配置了什么？能不能修改？能修改哪些配置？能不能扩展？xxx</p><pre><code>xxxxAutoConfiguration：帮我们给容器中自动配置组件；xxxxProperties:配置类来封装配置文件的内容；</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBootHelloWorld </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Intellij 2019 破解</title>
      <link href="/2019/09/17/Intellij-2019-%E7%A0%B4%E8%A7%A3/"/>
      <url>/2019/09/17/Intellij-2019-%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://zhile.io/2018/08/25/jetbrains-license-server-crack.html" target="_blank" rel="noopener">https://zhile.io/2018/08/25/jetbrains-license-server-crack.html</a></p><p>========================================================================<br>请先 定仔细阅读本 档! 定通过IDE菜单编辑javaagent参数，别瞎TM在bin 录下 改!!!<br>如果你下载的jetbrains-agent.jar 于1M，肯定是没有下载完全(可对照sha1sum.txt) 可以参考 件夹内:javaagent_sample.png</p><h1 id><a href="#" class="headerlink" title="======="></a>=======</h1><h1 id="-1"><a href="#-1" class="headerlink" title="======="></a>=======</h1><h1 id="-2"><a href="#-2" class="headerlink" title="======="></a>=======</h1><p>=======</p><p> 使  法:</p><ol><li>先下载压缩包解压后得到jetbrains-agent.jar，把它放到你认为合适的 件夹内。<br>下载  :<a href="https://zhile.io/2018/08/17/jetbrains-license-server-crack.html" target="_blank" rel="noopener">https://zhile.io/2018/08/17/jetbrains-license-server-crack.html</a></li><li>启动你的IDE，如果上来就需要注册，选择:试 (Evaluate for free)进 IDE。</li><li>点击你要注册的IDE菜单: Configure 或 Help -&gt; Edit Custom VM Options … 如果提示是否要创建 件，请点 Yes 。 参考 章:<a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544869" target="_blank" rel="noopener">https://intellij-support.jetbrains.com/hc/en-us/articles/206544869</a></li><li>在打开的vmoptions编辑窗 末 添加: -javaagent:/absolute/path/to/jetbrains-agent.jar  定要  确认好 径( 要使 中  径)，填错会导致IDE打 开!!!最好使 绝对 径。  个vmoptions内只能有 个 -javaagent 参数。<br>示 :<br>mac: -javaagent:/Users/neo/jetbrains-agent.jar linux: -javaagent:/home/neo/jetbrains-agent.jar windows: -javaagent:C:\Users\neo\jetbrains-agent.jar<br>如果还是填错 ，参考这篇 章编辑vmoptions补救: <a href="https://intellij-support.jetbrains.com/hc/en-us/articles/206544519" target="_blank" rel="noopener">https://intellij-support.jetbrains.com/hc/en-us/articles/206544519</a></li><li>重启你的IDE。</li><li>点击IDE菜单 Help -&gt; Register… 或 Configure -&gt; Manage License…<br>持两种注册 式:License server 和 Activation code:</li><li>选择License server 式，地址填 : <a href="http://jetbrains-license-server" target="_blank" rel="noopener">http://jetbrains-license-server</a> (应该会 动填上)<br>或者点击按钮: Discover Server 来 动填充地址。</li><li>选择Activation code 式离线激活，请使 : ACTIVATION_CODE.txt 内的注册码激活。 如果激活窗  直弹出(error 1653219)，请去hosts 件 移除jetbrains相关的项 。 如果你需要 定义License name，请访问:<a href="https://zhile.io/custom-license.html" target="_blank" rel="noopener">https://zhile.io/custom-license.html</a><br>本项 在最新2019.2上测试通过。  论上适 于 前Jetbrains全系 所有新 版本(这 话是瞎说的，如有问题请给我issue或进QQ群: 30347511 讨论)。 IDE升级会从旧版本导 以上设置，导 配置后可能提示未注册(因为刚导 的vmoptions未 效)，直接重启IDE即 可， 需其他操作。<br>本项 只做学习研究之 ， 得 于商业 途!<br>若资 允许，请点击 <a href="https://www.jetbrains.com/idea/buy/" target="_blank" rel="noopener">https://www.jetbrains.com/idea/buy/</a> 购买正版，谢谢合作!<br>学 凭学 证可免费申请 <a href="https://sales.jetbrains.com/hc/zh-cn/articles/207154369-学" target="_blank" rel="noopener">https://sales.jetbrains.com/hc/zh-cn/articles/207154369-学</a> 授权申请 式 正版授 权!<br>创业公司可5折购买 <a href="https://www.jetbrains.com/shop/eform/startup" target="_blank" rel="noopener">https://www.jetbrains.com/shop/eform/startup</a> 正版授权!</li></ol>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Intellij破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac jdk 环境变量配置</title>
      <link href="/2019/09/17/Mac-jdk-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/09/17/Mac-jdk-%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="Mac-安装jdk默认路径"><a href="#Mac-安装jdk默认路径" class="headerlink" title="Mac 安装jdk默认路径"></a>Mac 安装jdk默认路径</h2><blockquote><p>/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk</p></blockquote><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568708718338.png" alt="默认jdk安装路径"></p><h2 id="Mac-jdk环境变量配置"><a href="#Mac-jdk环境变量配置" class="headerlink" title="Mac jdk环境变量配置"></a>Mac jdk环境变量配置</h2><blockquote><p>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_181.jdk/Contents/Home<br>PATH=$JAVA_HOME/bin:$PATH:.<br>CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.<br>export JAVA_HOME<br>export CLASSPATH<br>export PATH</p></blockquote><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><blockquote><p>source .bash_profile<br>echo $JAVA_HOME</p></blockquote><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568708918225.png" alt="验证图片"></p>]]></content>
      
      
      <categories>
          
          <category> 环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mac_Jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 基础</title>
      <link href="/2019/09/17/Spring-Boot-%E5%9F%BA%E7%A1%80/"/>
      <url>/2019/09/17/Spring-Boot-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot基础"><a href="#SpringBoot基础" class="headerlink" title="SpringBoot基础"></a>SpringBoot基础</h1><h1 id="一、SpringBoot简介"><a href="#一、SpringBoot简介" class="headerlink" title="一、SpringBoot简介"></a>一、SpringBoot简介</h1><h2 id="1-1-原有Spring优缺点分析"><a href="#1-1-原有Spring优缺点分析" class="headerlink" title="1.1  原有Spring优缺点分析"></a>1.1  原有Spring优缺点分析</h2><h3 id="1-1-1-Spring的优点分析"><a href="#1-1-1-Spring的优点分析" class="headerlink" title="1.1.1 Spring的优点分析"></a>1.1.1 Spring的优点分析</h3><p>Spring是Java企业版（Java Enterprise Edition，JEE，也称J2EE）的轻量级代替品。无需开发重量级的Enterprise JavaBean（EJB），Spring为企业级Java开发提供了一种相对简单的方法，通过依赖注入和面向切面编程，用简单的Java对象（Plain Old Java Object，POJO）实现了EJB的功能。</p><h3 id="1-1-2-Spring的缺点分析"><a href="#1-1-2-Spring的缺点分析" class="headerlink" title="1.1.2 Spring的缺点分析"></a>1.1.2 Spring的缺点分析</h3><p>虽然Spring的组件代码是轻量级的，但它的配置却是重量级的。一开始，Spring用XML配置，而且是很多XML配置。Spring 2.5引入了基于注解的组件扫描，这消除了大量针对应用程序自身组件的显式XML配置。Spring 3.0引入了基于Java的配置，这是一种类型安全的可重构配置方式，可以代替XML。</p><p>所有这些配置都代表了开发时的损耗。因为在思考Spring特性配置和解决业务问题之间需要进行思维切换，所以编写配置挤占了编写应用程序逻辑的时间。和所有框架一样，Spring实用，但与此同时它要求的回报也不少。</p><p>除此之外，项目的依赖管理也是一件耗时耗力的事情。在环境搭建时，需要分析要导入哪些库的坐标，而且还需要分析导入与之有依赖关系的其他库的坐标，一旦选错了依赖的版本，随之而来的不兼容问题就会严重阻碍项目的开发进度。</p><h2 id="1-2-SpringBoot的概述"><a href="#1-2-SpringBoot的概述" class="headerlink" title="1.2 SpringBoot的概述"></a>1.2 SpringBoot的概述</h2><h3 id="1-2-1-SpringBoot解决上述Spring的缺点"><a href="#1-2-1-SpringBoot解决上述Spring的缺点" class="headerlink" title="1.2.1 SpringBoot解决上述Spring的缺点"></a>1.2.1 SpringBoot解决上述Spring的缺点</h3><p>SpringBoot对上述Spring的缺点进行的改善和优化，基于约定优于配置的思想，可以让开发人员不必在配置与逻辑业务之间进行思维的切换，全身心的投入到逻辑业务的代码编写中，从而大大提高了开发的效率，一定程度上缩短了项目周期。</p><h3 id="1-2-2-SpringBoot的特点"><a href="#1-2-2-SpringBoot的特点" class="headerlink" title="1.2.2 SpringBoot的特点"></a>1.2.2 SpringBoot的特点</h3><ul><li>为基于Spring的开发提供更快的入门体验</li><li>开箱即用，没有代码生成，也无需XML配置。同时也可以修改默认值来满足特定的需求</li><li>提供了一些大型项目中常见的非功能性特性，如嵌入式服务器、安全、指标，健康检测、外部配置等</li><li>SpringBoot不是对Spring功能上的增强，而是提供了一种快速使用Spring的方式</li></ul><h3 id="1-2-3-SpringBoot的核心功能"><a href="#1-2-3-SpringBoot的核心功能" class="headerlink" title="1.2.3 SpringBoot的核心功能"></a>1.2.3 SpringBoot的核心功能</h3><ul><li><p>起步依赖</p><p>起步依赖本质上是一个Maven项目对象模型（Project Object Model，POM），定义了对其他库的传递依赖，这些东西加在一起即支持某项功能。</p><p>简单的说，起步依赖就是将具备某种功能的坐标打包到一起，并提供一些默认的功能。</p></li><li><p>自动配置</p><p>Spring Boot的自动配置是一个运行时（更准确地说，是应用程序启动时）的过程，考虑了众多因素，才决定Spring配置应该用哪个，不该用哪个。该过程是Spring自动完成的。</p></li></ul><p>​    注意：起步依赖和自动配置的原理剖析会在第三章《SpringBoot原理分析》进行详细讲解</p><h1 id="二、SpringBoot快速入门"><a href="#二、SpringBoot快速入门" class="headerlink" title="二、SpringBoot快速入门"></a>二、SpringBoot快速入门</h1><h2 id="2-1-代码实现"><a href="#2-1-代码实现" class="headerlink" title="2.1 代码实现"></a>2.1 代码实现</h2><h3 id="2-1-1-创建Maven工程"><a href="#2-1-1-创建Maven工程" class="headerlink" title="2.1.1 创建Maven工程"></a>2.1.1 创建Maven工程</h3><p>使用idea工具创建一个maven工程，该工程为普通的java工程即可</p><p><img src="img%5C1.png" alt></p><p><img src="img%5C2.png" alt></p><p><img src="img%5C3.png" alt></p><p><img src="img%5C4.png" alt></p><h3 id="2-1-2-添加SpringBoot的起步依赖"><a href="#2-1-2-添加SpringBoot的起步依赖" class="headerlink" title="2.1.2 添加SpringBoot的起步依赖"></a>2.1.2 添加SpringBoot的起步依赖</h3><p>SpringBoot要求，项目要继承SpringBoot的起步依赖spring-boot-starter-parent</p><pre><code class="xml">&lt;parent&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;    &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;&lt;/parent&gt;</code></pre><p>SpringBoot要集成SpringMVC进行Controller的开发，所以项目要导入web的启动依赖</p><pre><code class="xml">&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre><h3 id="2-1-3-编写SpringBoot引导类"><a href="#2-1-3-编写SpringBoot引导类" class="headerlink" title="2.1.3 编写SpringBoot引导类"></a>2.1.3 编写SpringBoot引导类</h3><p>要通过SpringBoot提供的引导类起步SpringBoot才可以进行访问</p><pre><code class="java">package com.itheima;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;@SpringBootApplicationpublic class MySpringBootApplication {    public static void main(String[] args) {        SpringApplication.run(MySpringBootApplication.class);    }}</code></pre><h3 id="2-1-4-编写Controller"><a href="#2-1-4-编写Controller" class="headerlink" title="2.1.4 编写Controller"></a>2.1.4 编写Controller</h3><p>在引导类MySpringBootApplication同级包或者子级包中创建QuickStartController</p><pre><code class="java">package com.itheima.controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.ResponseBody;@Controllerpublic class QuickStartController {    @RequestMapping(&quot;/quick&quot;)    @ResponseBody    public String quick(){        return &quot;springboot 访问成功!&quot;;    }}</code></pre><h3 id="2-1-5-测试"><a href="#2-1-5-测试" class="headerlink" title="2.1.5 测试"></a>2.1.5 测试</h3><p>执行SpringBoot起步类的主方法，控制台打印日志如下：</p><pre><code>.   ____          _            __ _ _ /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _` | \ \ \ \ \\/  ___)| |_)| | | | | || (_| |  ) ) ) )  &#39;  |____| .__|_| |_|_| |_\__, | / / / / =========|_|==============|___/=/_/_/_/ :: Spring Boot ::        (v2.0.1.RELEASE)2018-05-08 14:29:59.714  INFO 5672 --- [           main] com.itheima.MySpringBootApplication      : Starting MySpringBootApplication on DESKTOP-RRUNFUH with PID 5672 (C:\Users\muzimoo\IdeaProjects\IdeaTest\springboot_quick\target\classes started by muzimoo in C:\Users\muzimoo\IdeaProjects\IdeaTest)... ... ...o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]2018-05-08 14:30:03.126  INFO 5672 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup2018-05-08 14:30:03.196  INFO 5672 --- [           main] o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port(s): 8080 (http) with context path &#39;&#39;2018-05-08 14:30:03.206  INFO 5672 --- [           main] com.itheima.MySpringBootApplication      : Started MySpringBootApplication in 4.252 seconds (JVM running for 5.583)</code></pre><p>通过日志发现，Tomcat started on port(s): 8080 (http) with context path ‘’</p><p>tomcat已经起步，端口监听8080，web应用的虚拟工程名称为空</p><p>打开浏览器访问url地址为：<a href="http://localhost:8080/quick" target="_blank" rel="noopener">http://localhost:8080/quick</a></p><p><img src="img%5C5.png" alt></p><h2 id="2-2-快速入门解析"><a href="#2-2-快速入门解析" class="headerlink" title="2.2 快速入门解析"></a>2.2 快速入门解析</h2><h3 id="2-2-2-SpringBoot代码解析"><a href="#2-2-2-SpringBoot代码解析" class="headerlink" title="2.2.2 SpringBoot代码解析"></a>2.2.2 SpringBoot代码解析</h3><ul><li>@SpringBootApplication：标注SpringBoot的启动类，该注解具备多种功能（后面详细剖析）</li><li>SpringApplication.run(MySpringBootApplication.class) 代表运行SpringBoot的启动类，参数为SpringBoot启动类的字节码对象</li></ul><h3 id="2-2-3-SpringBoot工程热部署"><a href="#2-2-3-SpringBoot工程热部署" class="headerlink" title="2.2.3 SpringBoot工程热部署"></a>2.2.3 SpringBoot工程热部署</h3><p>我们在开发中反复修改类、页面等资源，每次修改后都是需要重新启动才生效，这样每次启动都很麻烦，浪费了大量的时间，我们可以在修改代码后不重启就能生效，在 pom.xml 中添加如下配置就可以实现这样的功能，我们称之为热部署。</p><pre><code class="xml">&lt;!--热部署配置--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><p>注意：IDEA进行SpringBoot热部署失败原因</p><p>出现这种情况，并不是热部署配置问题，其根本原因是因为Intellij IEDA默认情况下不会自动编译，需要对IDEA进行自动编译的设置，如下：</p><p><img src="img%5C19.png" alt></p><p>然后 Shift+Ctrl+Alt+/，选择Registry</p><p><img src="img%5C20.png" alt></p><h3 id="2-2-4-使用idea快速创建SpringBoot项目"><a href="#2-2-4-使用idea快速创建SpringBoot项目" class="headerlink" title="2.2.4 使用idea快速创建SpringBoot项目"></a>2.2.4 使用idea快速创建SpringBoot项目</h3><p><img src="img%5C6.png" alt></p><p><img src="img%5C7.png" alt></p><p><img src="img%5C8.png" alt></p><p><img src="img%5C9.png" alt></p><p><img src="img%5C10.png" alt></p><p>通过idea快速创建的SpringBoot项目的pom.xml中已经导入了我们选择的web的起步依赖的坐标</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;    &lt;groupId&gt;com.itheima&lt;/groupId&gt;    &lt;artifactId&gt;springboot_quick2&lt;/artifactId&gt;    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;    &lt;packaging&gt;jar&lt;/packaging&gt;    &lt;name&gt;springboot_quick2&lt;/name&gt;    &lt;description&gt;Demo project for Spring Boot&lt;/description&gt;    &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;        &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;    &lt;/parent&gt;    &lt;properties&gt;        &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;        &lt;project.reporting.outputEncoding&gt;UTF-8&lt;/project.reporting.outputEncoding&gt;        &lt;java.version&gt;9&lt;/java.version&gt;    &lt;/properties&gt;    &lt;dependencies&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;        &lt;/dependency&gt;        &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;            &lt;scope&gt;test&lt;/scope&gt;        &lt;/dependency&gt;    &lt;/dependencies&gt;    &lt;build&gt;        &lt;plugins&gt;            &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;            &lt;/plugin&gt;        &lt;/plugins&gt;    &lt;/build&gt;&lt;/project&gt;</code></pre><p>可以使用快速入门的方式创建Controller进行访问，此处不再赘述</p><h1 id="三、SpringBoot原理分析"><a href="#三、SpringBoot原理分析" class="headerlink" title="三、SpringBoot原理分析"></a>三、SpringBoot原理分析</h1><h2 id="3-1-起步依赖原理分析"><a href="#3-1-起步依赖原理分析" class="headerlink" title="3.1 起步依赖原理分析"></a>3.1 起步依赖原理分析</h2><h3 id="3-1-1-分析spring-boot-starter-parent"><a href="#3-1-1-分析spring-boot-starter-parent" class="headerlink" title="3.1.1 分析spring-boot-starter-parent"></a>3.1.1 分析spring-boot-starter-parent</h3><p>按住Ctrl点击pom.xml中的spring-boot-starter-parent，跳转到了spring-boot-starter-parent的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre><code class="xml">&lt;parent&gt;  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;  &lt;artifactId&gt;spring-boot-dependencies&lt;/artifactId&gt;  &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;  &lt;relativePath&gt;../../spring-boot-dependencies&lt;/relativePath&gt;&lt;/parent&gt;</code></pre><p>按住Ctrl点击pom.xml中的spring-boot-starter-dependencies，跳转到了spring-boot-starter-dependencies的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre><code class="xml">&lt;properties&gt;      &lt;activemq.version&gt;5.15.3&lt;/activemq.version&gt;      &lt;antlr2.version&gt;2.7.7&lt;/antlr2.version&gt;      &lt;appengine-sdk.version&gt;1.9.63&lt;/appengine-sdk.version&gt;      &lt;artemis.version&gt;2.4.0&lt;/artemis.version&gt;      &lt;aspectj.version&gt;1.8.13&lt;/aspectj.version&gt;      &lt;assertj.version&gt;3.9.1&lt;/assertj.version&gt;      &lt;atomikos.version&gt;4.0.6&lt;/atomikos.version&gt;      &lt;bitronix.version&gt;2.1.4&lt;/bitronix.version&gt;      &lt;build-helper-maven-plugin.version&gt;3.0.0&lt;/build-helper-maven-plugin.version&gt;      &lt;byte-buddy.version&gt;1.7.11&lt;/byte-buddy.version&gt;      ... ... ...&lt;/properties&gt;&lt;dependencyManagement&gt;      &lt;dependencies&gt;          &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot&lt;/artifactId&gt;            &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;          &lt;/dependency&gt;          &lt;dependency&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-test&lt;/artifactId&gt;            &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;          &lt;/dependency&gt;          ... ... ...    &lt;/dependencies&gt;&lt;/dependencyManagement&gt;&lt;build&gt;      &lt;pluginManagement&gt;        &lt;plugins&gt;              &lt;plugin&gt;                &lt;groupId&gt;org.jetbrains.kotlin&lt;/groupId&gt;                &lt;artifactId&gt;kotlin-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;${kotlin.version}&lt;/version&gt;              &lt;/plugin&gt;              &lt;plugin&gt;                &lt;groupId&gt;org.jooq&lt;/groupId&gt;                &lt;artifactId&gt;jooq-codegen-maven&lt;/artifactId&gt;                &lt;version&gt;${jooq.version}&lt;/version&gt;              &lt;/plugin&gt;              &lt;plugin&gt;                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;                &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;              &lt;/plugin&gt;              ... ... ...        &lt;/plugins&gt;      &lt;/pluginManagement&gt;&lt;/build&gt;</code></pre><p>从上面的spring-boot-starter-dependencies的pom.xml中我们可以发现，一部分坐标的版本、依赖管理、插件管理已经定义好，所以我们的SpringBoot工程继承spring-boot-starter-parent后已经具备版本锁定等配置了。所以起步依赖的作用就是进行依赖的传递。</p><h3 id="3-1-2-分析spring-boot-starter-web"><a href="#3-1-2-分析spring-boot-starter-web" class="headerlink" title="3.1.2 分析spring-boot-starter-web"></a>3.1.2 分析spring-boot-starter-web</h3><p>按住Ctrl点击pom.xml中的spring-boot-starter-web，跳转到了spring-boot-starter-web的pom.xml，xml配置如下（只摘抄了部分重点配置）：</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;project xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot; xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&gt;      &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;      &lt;parent&gt;        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;        &lt;artifactId&gt;spring-boot-starters&lt;/artifactId&gt;        &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;      &lt;/parent&gt;      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;      &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;      &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;      &lt;name&gt;Spring Boot Web Starter&lt;/name&gt;      &lt;dependencies&gt;        &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;              &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;              &lt;scope&gt;compile&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter-json&lt;/artifactId&gt;              &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;              &lt;scope&gt;compile&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;              &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;              &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;              &lt;version&gt;2.0.1.RELEASE&lt;/version&gt;              &lt;scope&gt;compile&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;              &lt;groupId&gt;org.hibernate.validator&lt;/groupId&gt;              &lt;artifactId&gt;hibernate-validator&lt;/artifactId&gt;              &lt;version&gt;6.0.9.Final&lt;/version&gt;              &lt;scope&gt;compile&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;              &lt;groupId&gt;org.springframework&lt;/groupId&gt;              &lt;artifactId&gt;spring-web&lt;/artifactId&gt;              &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;              &lt;scope&gt;compile&lt;/scope&gt;        &lt;/dependency&gt;        &lt;dependency&gt;              &lt;groupId&gt;org.springframework&lt;/groupId&gt;              &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;              &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;              &lt;scope&gt;compile&lt;/scope&gt;        &lt;/dependency&gt;      &lt;/dependencies&gt;&lt;/project&gt;</code></pre><p>从上面的spring-boot-starter-web的pom.xml中我们可以发现，spring-boot-starter-web就是将web开发要使用的spring-web、spring-webmvc等坐标进行了“打包”，这样我们的工程只要引入spring-boot-starter-web起步依赖的坐标就可以进行web开发了，同样体现了依赖传递的作用。</p><h2 id="3-2-自动配置原理解析"><a href="#3-2-自动配置原理解析" class="headerlink" title="3.2 自动配置原理解析"></a>3.2 自动配置原理解析</h2><p>按住Ctrl点击查看启动类MySpringBootApplication上的注解@SpringBootApplication</p><pre><code class="java">@SpringBootApplicationpublic class MySpringBootApplication {    public static void main(String[] args) {        SpringApplication.run(MySpringBootApplication.class);    }}</code></pre><p>注解@SpringBootApplication的源码</p><pre><code class="java">@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@SpringBootConfiguration@EnableAutoConfiguration@ComponentScan(excludeFilters = {        @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),        @Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })public @interface SpringBootApplication {    /**     * Exclude specific auto-configuration classes such that they will never be applied.     * @return the classes to exclude     */    @AliasFor(annotation = EnableAutoConfiguration.class)    Class&lt;?&gt;[] exclude() default {};    ... ... ...}</code></pre><p>其中，</p><p>@SpringBootConfiguration：等同与@Configuration，既标注该类是Spring的一个配置类</p><p>@EnableAutoConfiguration：SpringBoot自动配置功能开启</p><p>按住Ctrl点击查看注解@EnableAutoConfiguration</p><pre><code class="java">@Target(ElementType.TYPE)@Retention(RetentionPolicy.RUNTIME)@Documented@Inherited@AutoConfigurationPackage@Import(AutoConfigurationImportSelector.class)public @interface EnableAutoConfiguration {    ... ... ...}</code></pre><p>其中，@Import(AutoConfigurationImportSelector.class) 导入了AutoConfigurationImportSelector类</p><p>按住Ctrl点击查看AutoConfigurationImportSelector源码</p><pre><code class="java">public String[] selectImports(AnnotationMetadata annotationMetadata) {        ... ... ...        List&lt;String&gt; configurations = getCandidateConfigurations(annotationMetadata,                                                                   attributes);        configurations = removeDuplicates(configurations);        Set&lt;String&gt; exclusions = getExclusions(annotationMetadata, attributes);        checkExcludedClasses(configurations, exclusions);        configurations.removeAll(exclusions);        configurations = filter(configurations, autoConfigurationMetadata);        fireAutoConfigurationImportEvents(configurations, exclusions);        return StringUtils.toStringArray(configurations);}protected List&lt;String&gt; getCandidateConfigurations(AnnotationMetadata metadata,            AnnotationAttributes attributes) {        List&lt;String&gt; configurations = SpringFactoriesLoader.loadFactoryNames(                getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader());        return configurations;}</code></pre><p>其中，SpringFactoriesLoader.loadFactoryNames 方法的作用就是从META-INF/spring.factories文件中读取指定类对应的类名称列表 </p><p><img src="img%5C11.png" alt></p><p>spring.factories 文件中有关自动配置的配置信息如下：</p><pre><code>... ... ...org.springframework.boot.autoconfigure.web.reactive.function.client.WebClientAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.HttpEncodingAutoConfiguration,\org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,\... ... ...</code></pre><p>上面配置文件存在大量的以Configuration为结尾的类名称，这些类就是存有自动配置信息的类，而SpringApplication在获取这些类名后再加载</p><p>我们以ServletWebServerFactoryAutoConfiguration为例来分析源码：</p><pre><code class="java">@Configuration@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE)@ConditionalOnClass(ServletRequest.class)@ConditionalOnWebApplication(type = Type.SERVLET)@EnableConfigurationProperties(ServerProperties.class)@Import({ ServletWebServerFactoryAutoConfiguration.BeanPostProcessorsRegistrar.class,        ServletWebServerFactoryConfiguration.EmbeddedTomcat.class,        ServletWebServerFactoryConfiguration.EmbeddedJetty.class,        ServletWebServerFactoryConfiguration.EmbeddedUndertow.class })public class ServletWebServerFactoryAutoConfiguration {    ... ... ...}</code></pre><p>其中，</p><p>@EnableConfigurationProperties(ServerProperties.class) 代表加载ServerProperties服务器配置属性类</p><p>进入ServerProperties.class源码如下：</p><pre><code class="java">@ConfigurationProperties(prefix = &quot;server&quot;, ignoreUnknownFields = true)public class ServerProperties {    /**     * Server HTTP port.     */    private Integer port;    /**     * Network address to which the server should bind.     */    private InetAddress address;      ... ... ...}</code></pre><p>其中，</p><p>prefix = “server” 表示SpringBoot配置文件中的前缀，SpringBoot会将配置文件中以server开始的属性映射到该类的字段中。映射关系如下：</p><p><img src="img%5C12.png" alt></p><h1 id="四、SpringBoot的配置文件"><a href="#四、SpringBoot的配置文件" class="headerlink" title="四、SpringBoot的配置文件"></a>四、SpringBoot的配置文件</h1><h2 id="4-1-SpringBoot配置文件类型"><a href="#4-1-SpringBoot配置文件类型" class="headerlink" title="4.1 SpringBoot配置文件类型"></a>4.1 SpringBoot配置文件类型</h2><h3 id="4-1-1-SpringBoot配置文件类型和作用"><a href="#4-1-1-SpringBoot配置文件类型和作用" class="headerlink" title="4.1.1 SpringBoot配置文件类型和作用"></a>4.1.1 SpringBoot配置文件类型和作用</h3><p>SpringBoot是基于约定的，所以很多配置都有默认值，但如果想使用自己的配置替换默认配置的话，就可以使用application.properties或者application.yml（application.yaml）进行配置。</p><p>SpringBoot默认会从Resources目录下加载application.properties或application.yml（application.yaml）文件</p><p>其中，application.properties文件是键值对类型的文件，之前一直在使用，所以此处不在对properties文件的格式进行阐述。除了properties文件外，SpringBoot还可以使用yml文件进行配置，下面对yml文件进行讲解。</p><h3 id="4-1-2-application-yml配置文件"><a href="#4-1-2-application-yml配置文件" class="headerlink" title="4.1.2 application.yml配置文件"></a>4.1.2 application.yml配置文件</h3><h4 id="4-1-2-1-yml配置文件简介"><a href="#4-1-2-1-yml配置文件简介" class="headerlink" title="4.1.2.1 yml配置文件简介"></a>4.1.2.1 yml配置文件简介</h4><p>YML文件格式是YAML (YAML Aint Markup Language)编写的文件格式，YAML是一种直观的能够被电脑识别的的数据数据序列化格式，并且容易被人类阅读，容易和脚本语言交互的，可以被支持YAML库的不同的编程语言程序导入，比如： C/C++, Ruby, Python, Java, Perl, C#, PHP等。YML文件是以数据为核心的，比传统的xml方式更加简洁。</p><p>YML文件的扩展名可以使用.yml或者.yaml。</p><h4 id="4-1-2-2-yml配置文件的语法"><a href="#4-1-2-2-yml配置文件的语法" class="headerlink" title="4.1.2.2 yml配置文件的语法"></a>4.1.2.2 yml配置文件的语法</h4><h5 id="4-1-2-2-1-配置普通数据"><a href="#4-1-2-2-1-配置普通数据" class="headerlink" title="4.1.2.2.1 配置普通数据"></a>4.1.2.2.1 配置普通数据</h5><ul><li><p>语法： key: value</p></li><li><p>示例代码：</p></li><li><pre><code class="yaml">name: haohao</code></pre></li><li><p>注意：value之前有一个空格</p></li></ul><h5 id="4-1-2-2-2-配置对象数据"><a href="#4-1-2-2-2-配置对象数据" class="headerlink" title="4.1.2.2.2 配置对象数据"></a>4.1.2.2.2 配置对象数据</h5><ul><li><p>语法： </p><p>​    key: </p><p>​        key1: value1</p><p>​        key2: value2</p><p>​    或者：</p><p>​    key: {key1: value1,key2: value2}</p></li><li><p>示例代码：</p></li><li><pre><code class="yaml">person:  name: haohao  age: 31  addr: beijing#或者person: {name: haohao,age: 31,addr: beijing}</code></pre></li><li><p>注意：key1前面的空格个数不限定，在yml语法中，相同缩进代表同一个级别</p></li></ul><h5 id="4-1-2-2-2-配置Map数据"><a href="#4-1-2-2-2-配置Map数据" class="headerlink" title="4.1.2.2.2 配置Map数据"></a>4.1.2.2.2 配置Map数据</h5><p>同上面的对象写法</p><h5 id="4-1-2-2-3-配置数组（List、Set）数据"><a href="#4-1-2-2-3-配置数组（List、Set）数据" class="headerlink" title="4.1.2.2.3 配置数组（List、Set）数据"></a>4.1.2.2.3 配置数组（List、Set）数据</h5><ul><li><p>语法： </p><p>​    key: </p><p>​        - value1</p><p>​        - value2</p><p>或者：</p><p>​    key: [value1,value2]</p></li><li><p>示例代码：</p></li><li><pre><code class="yaml">city:  - beijing  - tianjin  - shanghai  - chongqing#或者city: [beijing,tianjin,shanghai,chongqing]#集合中的元素是对象形式student:  - name: zhangsan    age: 18    score: 100  - name: lisi    age: 28    score: 88  - name: wangwu    age: 38    score: 90</code></pre></li><li><p>注意：value1与之间的 - 之间存在一个空格</p></li></ul><h3 id="4-1-3-SpringBoot配置信息的查询"><a href="#4-1-3-SpringBoot配置信息的查询" class="headerlink" title="4.1.3 SpringBoot配置信息的查询"></a>4.1.3 SpringBoot配置信息的查询</h3><p>上面提及过，SpringBoot的配置文件，主要的目的就是对配置信息进行修改的，但在配置时的key从哪里去查询呢？我们可以查阅SpringBoot的官方文档</p><p>文档URL：<a href="https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/2.0.1.RELEASE/reference/htmlsingle/#common-application-properties</a></p><p>常用的配置摘抄如下：</p><pre><code class="properties"># QUARTZ SCHEDULER (QuartzProperties)spring.quartz.jdbc.initialize-schema=embedded # Database schema initialization mode.spring.quartz.jdbc.schema=classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql # Path to the SQL file to use to initialize the database schema.spring.quartz.job-store-type=memory # Quartz job store type.spring.quartz.properties.*= # Additional Quartz Scheduler properties.# ----------------------------------------# WEB PROPERTIES# ----------------------------------------# EMBEDDED SERVER CONFIGURATION (ServerProperties)server.port=8080 # Server HTTP port.server.servlet.context-path= # Context path of the application.server.servlet.path=/ # Path of the main dispatcher servlet.# HTTP encoding (HttpEncodingProperties)spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the &quot;Content-Type&quot; header if not set explicitly.# JACKSON (JacksonProperties)spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.# SPRING MVC (WebMvcProperties)spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the dispatcher servlet.spring.mvc.static-path-pattern=/** # Path pattern used for static resources.spring.mvc.view.prefix= # Spring MVC view prefix.spring.mvc.view.suffix= # Spring MVC view suffix.# DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.spring.datasource.password= # Login password of the database.spring.datasource.url= # JDBC URL of the database.spring.datasource.username= # Login username of the database.# JEST (Elasticsearch HTTP client) (JestProperties)spring.elasticsearch.jest.password= # Login password.spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.spring.elasticsearch.jest.read-timeout=3s # Read timeout.spring.elasticsearch.jest.username= # Login username.</code></pre><p>我们可以通过配置application.poperties 或者 application.yml 来修改SpringBoot的默认配置</p><p>例如：</p><p>application.properties文件</p><pre><code class="properties">server.port=8888server.servlet.context-path=demo</code></pre><p>application.yml文件</p><pre><code class="yaml">server:  port: 8888  servlet:    context-path: /demo</code></pre><h2 id="4-2-配置文件与配置类的属性映射方式"><a href="#4-2-配置文件与配置类的属性映射方式" class="headerlink" title="4.2 配置文件与配置类的属性映射方式"></a>4.2 配置文件与配置类的属性映射方式</h2><h3 id="4-2-1-使用注解-Value映射"><a href="#4-2-1-使用注解-Value映射" class="headerlink" title="4.2.1 使用注解@Value映射"></a>4.2.1 使用注解@Value映射</h3><p>我们可以通过@Value注解将配置文件中的值映射到一个Spring管理的Bean的字段上</p><p>例如：</p><p>application.properties配置如下：</p><pre><code class="properties">person:  name: zhangsan  age: 18</code></pre><p>或者，application.yml配置如下：</p><pre><code class="yaml">person:  name: zhangsan  age: 18</code></pre><p>实体Bean代码如下：</p><pre><code class="java">@Controllerpublic class QuickStartController {    @Value(&quot;${person.name}&quot;)    private String name;    @Value(&quot;${person.age}&quot;)    private Integer age;    @RequestMapping(&quot;/quick&quot;)    @ResponseBody    public String quick(){        return &quot;springboot 访问成功! name=&quot;+name+&quot;,age=&quot;+age;    }}</code></pre><p>浏览器访问地址：<a href="http://localhost:8080/quick" target="_blank" rel="noopener">http://localhost:8080/quick</a> 结果如下：</p><p><img src="img%5C13.png" alt></p><h3 id="4-2-2-使用注解-ConfigurationProperties映射"><a href="#4-2-2-使用注解-ConfigurationProperties映射" class="headerlink" title="4.2.2 使用注解@ConfigurationProperties映射"></a>4.2.2 使用注解@ConfigurationProperties映射</h3><p>通过注解@ConfigurationProperties(prefix=”配置文件中的key的前缀”)可以将配置文件中的配置自动与实体进行映射</p><p>application.properties配置如下：</p><pre><code class="properties">person:  name: zhangsan  age: 18</code></pre><p>或者，application.yml配置如下：</p><pre><code class="yaml">person:  name: zhangsan  age: 18</code></pre><p>实体Bean代码如下：</p><pre><code class="java">@Controller@ConfigurationProperties(prefix = &quot;person&quot;)public class QuickStartController {    private String name;    private Integer age;    @RequestMapping(&quot;/quick&quot;)    @ResponseBody    public String quick(){        return &quot;springboot 访问成功! name=&quot;+name+&quot;,age=&quot;+age;    }    public void setName(String name) {        this.name = name;    }    public void setAge(Integer age) {        this.age = age;    }}</code></pre><p>浏览器访问地址：<a href="http://localhost:8080/quick" target="_blank" rel="noopener">http://localhost:8080/quick</a> 结果如下：</p><p><img src="img%5C13.png" alt></p><p>注意：使用@ConfigurationProperties方式可以进行配置文件与实体字段的自动映射，但需要字段必须提供set方法才可以，而使用@Value注解修饰的字段不需要提供set方法</p><h1 id="五、SpringBoot与整合其他技术"><a href="#五、SpringBoot与整合其他技术" class="headerlink" title="五、SpringBoot与整合其他技术"></a>五、SpringBoot与整合其他技术</h1><h2 id="5-1-SpringBoot整合Mybatis"><a href="#5-1-SpringBoot整合Mybatis" class="headerlink" title="5.1 SpringBoot整合Mybatis"></a>5.1 SpringBoot整合Mybatis</h2><h3 id="5-1-1-添加Mybatis的起步依赖"><a href="#5-1-1-添加Mybatis的起步依赖" class="headerlink" title="5.1.1 添加Mybatis的起步依赖"></a>5.1.1 添加Mybatis的起步依赖</h3><pre><code class="xml">&lt;!--mybatis起步依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;    &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;    &lt;version&gt;1.1.1&lt;/version&gt;&lt;/dependency&gt;</code></pre><h3 id="5-1-2-添加数据库驱动坐标"><a href="#5-1-2-添加数据库驱动坐标" class="headerlink" title="5.1.2 添加数据库驱动坐标"></a>5.1.2 添加数据库驱动坐标</h3><pre><code class="xml">&lt;!-- MySQL连接驱动 --&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="5-1-3-添加数据库连接信息"><a href="#5-1-3-添加数据库连接信息" class="headerlink" title="5.1.3 添加数据库连接信息"></a>5.1.3 添加数据库连接信息</h3><p>在application.properties中添加数据量的连接信息</p><pre><code class="properties">#DB Configuration:spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8spring.datasource.username=rootspring.datasource.password=root</code></pre><h3 id="5-1-4-创建user表"><a href="#5-1-4-创建user表" class="headerlink" title="5.1.4 创建user表"></a>5.1.4 创建user表</h3><p>在test数据库中创建user表</p><pre><code class="sql">-- ------------------------------ Table structure for `user`-- ----------------------------DROP TABLE IF EXISTS `user`;CREATE TABLE `user` (  `id` int(11) NOT NULL AUTO_INCREMENT,  `username` varchar(50) DEFAULT NULL,  `password` varchar(50) DEFAULT NULL,  `name` varchar(50) DEFAULT NULL,  PRIMARY KEY (`id`)) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;-- ------------------------------ Records of user-- ----------------------------INSERT INTO `user` VALUES (&#39;1&#39;, &#39;zhangsan&#39;, &#39;123&#39;, &#39;张三&#39;);INSERT INTO `user` VALUES (&#39;2&#39;, &#39;lisi&#39;, &#39;123&#39;, &#39;李四&#39;);</code></pre><h3 id="5-1-5-创建实体Bean"><a href="#5-1-5-创建实体Bean" class="headerlink" title="5.1.5 创建实体Bean"></a>5.1.5 创建实体Bean</h3><pre><code class="java">public class User {    // 主键    private Long id;    // 用户名    private String username;    // 密码    private String password;    // 姓名    private String name;    //此处省略getter和setter方法 .. ..}</code></pre><h3 id="5-1-6-编写Mapper"><a href="#5-1-6-编写Mapper" class="headerlink" title="5.1.6 编写Mapper"></a>5.1.6 编写Mapper</h3><pre><code class="java">@Mapperpublic interface UserMapper {    public List&lt;User&gt; queryUserList();}</code></pre><p>注意：@Mapper标记该类是一个mybatis的mapper接口，可以被spring boot自动扫描到spring上下文中</p><h3 id="5-1-7-配置Mapper映射文件"><a href="#5-1-7-配置Mapper映射文件" class="headerlink" title="5.1.7 配置Mapper映射文件"></a>5.1.7 配置Mapper映射文件</h3><p>在src\main\resources\mapper路径下加入UserMapper.xml配置文件”</p><pre><code class="xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot; &gt;&lt;mapper namespace=&quot;com.itheima.mapper.UserMapper&quot;&gt;    &lt;select id=&quot;queryUserList&quot; resultType=&quot;user&quot;&gt;        select * from user    &lt;/select&gt;&lt;/mapper&gt;</code></pre><h3 id="5-1-8-在application-properties中添加mybatis的信息"><a href="#5-1-8-在application-properties中添加mybatis的信息" class="headerlink" title="5.1.8 在application.properties中添加mybatis的信息"></a>5.1.8 在application.properties中添加mybatis的信息</h3><pre><code class="properties">#spring集成Mybatis环境#pojo别名扫描包mybatis.type-aliases-package=com.itheima.domain#加载Mybatis映射文件mybatis.mapper-locations=classpath:mapper/*Mapper.xml</code></pre><h3 id="5-1-9-编写测试Controller"><a href="#5-1-9-编写测试Controller" class="headerlink" title="5.1.9 编写测试Controller"></a>5.1.9 编写测试Controller</h3><pre><code class="java">@Controllerpublic class MapperController {    @Autowired    private UserMapper userMapper;    @RequestMapping(&quot;/queryUser&quot;)    @ResponseBody    public List&lt;User&gt; queryUser(){        List&lt;User&gt; users = userMapper.queryUserList();        return users;    }}</code></pre><h3 id="5-1-10-测试"><a href="#5-1-10-测试" class="headerlink" title="5.1.10 测试"></a>5.1.10 测试</h3><p><img src="img%5C14.png" alt></p><h2 id="5-2-SpringBoot整合Junit"><a href="#5-2-SpringBoot整合Junit" class="headerlink" title="5.2 SpringBoot整合Junit"></a>5.2 SpringBoot整合Junit</h2><h3 id="5-2-1-添加Junit的起步依赖"><a href="#5-2-1-添加Junit的起步依赖" class="headerlink" title="5.2.1 添加Junit的起步依赖"></a>5.2.1 添加Junit的起步依赖</h3><pre><code class="xml">&lt;!--测试的起步依赖--&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;    &lt;scope&gt;test&lt;/scope&gt;&lt;/dependency&gt;</code></pre><h3 id="5-2-2-编写测试类"><a href="#5-2-2-编写测试类" class="headerlink" title="5.2.2 编写测试类"></a>5.2.2 编写测试类</h3><pre><code class="java">package com.itheima.test;import com.itheima.MySpringBootApplication;import com.itheima.domain.User;import com.itheima.mapper.UserMapper;import org.junit.Test;import org.junit.runner.RunWith;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.test.context.SpringBootTest;import org.springframework.test.context.junit4.SpringRunner;import java.util.List;@RunWith(SpringRunner.class)@SpringBootTest(classes = MySpringBootApplication.class)public class MapperTest {    @Autowired    private UserMapper userMapper;    @Test    public void test() {        List&lt;User&gt; users = userMapper.queryUserList();        System.out.println(users);    }}</code></pre><p>其中，</p><p>SpringRunner继承自SpringJUnit4ClassRunner，使用哪一个Spring提供的测试测试引擎都可以</p><pre><code class="java">public final class SpringRunner extends SpringJUnit4ClassRunner </code></pre><p>@SpringBootTest的属性指定的是引导类的字节码对象</p><h3 id="5-2-3-控制台打印信息"><a href="#5-2-3-控制台打印信息" class="headerlink" title="5.2.3 控制台打印信息"></a>5.2.3 控制台打印信息</h3><p><img src="img%5C15.png" alt></p><h2 id="5-3-SpringBoot整合Spring-Data-JPA"><a href="#5-3-SpringBoot整合Spring-Data-JPA" class="headerlink" title="5.3 SpringBoot整合Spring Data JPA"></a>5.3 SpringBoot整合Spring Data JPA</h2><h3 id="5-3-1-添加Spring-Data-JPA的起步依赖"><a href="#5-3-1-添加Spring-Data-JPA的起步依赖" class="headerlink" title="5.3.1 添加Spring Data JPA的起步依赖"></a>5.3.1 添加Spring Data JPA的起步依赖</h3><pre><code class="xml">&lt;!-- springBoot JPA的起步依赖 --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="5-3-2-添加数据库驱动依赖"><a href="#5-3-2-添加数据库驱动依赖" class="headerlink" title="5.3.2 添加数据库驱动依赖"></a>5.3.2 添加数据库驱动依赖</h3><pre><code class="xml">&lt;!-- MySQL连接驱动 --&gt;&lt;dependency&gt;    &lt;groupId&gt;mysql&lt;/groupId&gt;    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="5-3-3-在application-properties中配置数据库和jpa的相关属性"><a href="#5-3-3-在application-properties中配置数据库和jpa的相关属性" class="headerlink" title="5.3.3 在application.properties中配置数据库和jpa的相关属性"></a>5.3.3 在application.properties中配置数据库和jpa的相关属性</h3><pre><code class="properties">#DB Configuration:spring.datasource.driverClassName=com.mysql.jdbc.Driverspring.datasource.url=jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;characterEncoding=utf8spring.datasource.username=rootspring.datasource.password=root#JPA Configuration:spring.jpa.database=MySQLspring.jpa.show-sql=truespring.jpa.generate-ddl=truespring.jpa.hibernate.ddl-auto=updatespring.jpa.hibernate.naming_strategy=org.hibernate.cfg.ImprovedNamingStrategy</code></pre><h3 id="5-3-4-创建实体配置实体"><a href="#5-3-4-创建实体配置实体" class="headerlink" title="5.3.4 创建实体配置实体"></a>5.3.4 创建实体配置实体</h3><pre><code class="java">@Entitypublic class User {    // 主键    @Id    @GeneratedValue(strategy = GenerationType.IDENTITY)    private Long id;    // 用户名    private String username;    // 密码    private String password;    // 姓名    private String name;    //此处省略setter和getter方法... ...}</code></pre><h3 id="5-3-5-编写UserRepository"><a href="#5-3-5-编写UserRepository" class="headerlink" title="5.3.5 编写UserRepository"></a>5.3.5 编写UserRepository</h3><pre><code class="java">public interface UserRepository extends JpaRepository&lt;User,Long&gt;{    public List&lt;User&gt; findAll();}</code></pre><h3 id="5-3-6-编写测试类"><a href="#5-3-6-编写测试类" class="headerlink" title="5.3.6 编写测试类"></a>5.3.6 编写测试类</h3><pre><code class="java">@RunWith(SpringRunner.class)@SpringBootTest(classes=MySpringBootApplication.class)public class JpaTest {    @Autowired    private UserRepository userRepository;    @Test    public void test(){        List&lt;User&gt; users = userRepository.findAll();        System.out.println(users);    }}</code></pre><h3 id="5-3-7-控制台打印信息"><a href="#5-3-7-控制台打印信息" class="headerlink" title="5.3.7 控制台打印信息"></a>5.3.7 控制台打印信息</h3><p><img src="img%5C16.png" alt></p><p>注意：如果是jdk9，执行报错如下：</p><p><img src="img%5C17.png" alt></p><p>原因：jdk缺少相应的jar</p><p>解决方案：手动导入对应的maven坐标，如下：</p><pre><code class="xml">&lt;!--jdk9需要导入如下坐标--&gt;&lt;dependency&gt;    &lt;groupId&gt;javax.xml.bind&lt;/groupId&gt;    &lt;artifactId&gt;jaxb-api&lt;/artifactId&gt;    &lt;version&gt;2.3.0&lt;/version&gt;&lt;/dependency&gt;</code></pre><h2 id="5-4-SpringBoot整合Redis"><a href="#5-4-SpringBoot整合Redis" class="headerlink" title="5.4 SpringBoot整合Redis"></a>5.4 SpringBoot整合Redis</h2><h3 id="5-4-1-添加redis的起步依赖"><a href="#5-4-1-添加redis的起步依赖" class="headerlink" title="5.4.1 添加redis的起步依赖"></a>5.4.1 添加redis的起步依赖</h3><pre><code class="xml">&lt;!-- 配置使用redis启动器 --&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;&lt;/dependency&gt;</code></pre><h3 id="5-4-2-配置redis的连接信息"><a href="#5-4-2-配置redis的连接信息" class="headerlink" title="5.4.2 配置redis的连接信息"></a>5.4.2 配置redis的连接信息</h3><pre><code class="properties">#Redisspring.redis.host=127.0.0.1spring.redis.port=6379</code></pre><h3 id="5-4-3-注入RedisTemplate测试redis操作"><a href="#5-4-3-注入RedisTemplate测试redis操作" class="headerlink" title="5.4.3 注入RedisTemplate测试redis操作"></a>5.4.3 注入RedisTemplate测试redis操作</h3><pre><code class="java">@RunWith(SpringRunner.class)@SpringBootTest(classes = SpringbootJpaApplication.class)public class RedisTest {    @Autowired    private UserRepository userRepository;    @Autowired    private RedisTemplate&lt;String, String&gt; redisTemplate;    @Test    public void test() throws JsonProcessingException {        //从redis缓存中获得指定的数据        String userListData = redisTemplate.boundValueOps(&quot;user.findAll&quot;).get();        //如果redis中没有数据的话        if(null==userListData){            //查询数据库获得数据            List&lt;User&gt; all = userRepository.findAll();            //转换成json格式字符串            ObjectMapper om = new ObjectMapper();            userListData = om.writeValueAsString(all);            //将数据存储到redis中，下次在查询直接从redis中获得数据，不用在查询数据库            redisTemplate.boundValueOps(&quot;user.findAll&quot;).set(userListData);            System.out.println(&quot;===============从数据库获得数据===============&quot;);        }else{            System.out.println(&quot;===============从redis缓存中获得数据===============&quot;);        }        System.out.println(userListData);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown 高效编写工具小书匠配置介绍</title>
      <link href="/2019/09/17/markdown-%E9%AB%98%E6%95%88%E7%BC%96%E5%86%99%E5%B7%A5%E5%85%B7%E5%B0%8F%E4%B9%A6%E5%8C%A0%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/09/17/markdown-%E9%AB%98%E6%95%88%E7%BC%96%E5%86%99%E5%B7%A5%E5%85%B7%E5%B0%8F%E4%B9%A6%E5%8C%A0%E9%85%8D%E7%BD%AE%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="一、下载小书匠"><a href="#一、下载小书匠" class="headerlink" title="一、下载小书匠"></a>一、下载小书匠</h2><p>官网地址：<a href="http://soft.xiaoshujiang.com" target="_blank" rel="noopener">http://soft.xiaoshujiang.com</a></p><h2 id="二、配置github图床服务器"><a href="#二、配置github图床服务器" class="headerlink" title="二、配置github图床服务器"></a>二、配置github图床服务器</h2><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568696596020.png" alt="小书匠点击顺序"></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568696695294.png" alt="小书匠图床github配置"></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568696768922.png" alt="如图选项生成token"></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568696831013.png" alt="复制token填写倒小书匠中"></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568696883354.png" alt="github创建仓库"></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568696903689.png" alt="仓库命名和README"></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568696943379.png" alt="将仓库地址填写到小书匠中"></p><p><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568697024711.png" alt="这个地方使用默认即可"></p><h2 id="三、验证"><a href="#三、验证" class="headerlink" title="三、验证"></a>三、验证</h2><p>将图片复制到编辑页面中查看是否生效即可如图<br><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568697145028.png" alt="生效案例"></p><hr><h1 id="结束，有问题欢迎沟通"><a href="#结束，有问题欢迎沟通" class="headerlink" title="结束，有问题欢迎沟通"></a>结束，有问题欢迎沟通</h1>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小书匠MarkDown图床配置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客搭建过程</title>
      <link href="/2019/09/17/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2019/09/17/hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、本地环境搭建"><a href="#一、本地环境搭建" class="headerlink" title="一、本地环境搭建"></a>一、本地环境搭建</h3><ol><li>node.js 下载安装<br>官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a><br>点击安装包安装即可<br>可以通过版本号来验证<pre><code class="javascript">切换root用户：sudu su验证：node -vnpm -v</code></pre></li><li>hexo 下载安装</li></ol><p>（1）更改使用淘宝镜像源cnpm</p><pre><code class="javascript">npm install -g cnpm --registry=https://registry.npm.taobao.org</code></pre><p> （2）利用cnpm安装hexo</p><pre><code class="javascript">cnpm install -g hexo-cli验证hexo -v</code></pre><h3 id="二-hexo-生成博客"><a href="#二-hexo-生成博客" class="headerlink" title="二. hexo 生成博客"></a>二. hexo 生成博客</h3><p>（1）创建一个博客文件夹</p><pre><code class="javascript">mkdir blogcd blog</code></pre><p>（2）初始化博客</p><pre><code class="javascript">sudo hexo init</code></pre><p>（3）启动博客</p><pre><code class="javascript">hexo s</code></pre><p><strong>此时本地hexo博客已经创建完成</strong> </p><p>常用四个命令：</p><pre><code class="javascript">1. 清理  hexo c2. 生成静态文件 hexo g3. 启动 hexo s4. 发布 hexo d</code></pre><h3 id="三-hexo博客和github关联实现外网访问"><a href="#三-hexo博客和github关联实现外网访问" class="headerlink" title="三.hexo博客和github关联实现外网访问"></a>三.hexo博客和github关联实现外网访问</h3><ol><li>github 登录并新建仓库</li></ol><pre><code class="javascript">仓库名称：账户名.github.io</code></pre><ol start="2"><li>hexo 安装git插件</li></ol><pre><code class="javascript">cnpm install --save hexo-deployer-git</code></pre><ol start="3"><li>设置._config.yml 文件，配置de’ploy为git<pre><code class="javascript">deploy： type: git repo: github仓库路径 branch： master</code></pre><img src="https://www.github.com/18846433665/hexoimg/raw/master/%E5%B0%8F%E4%B9%A6%E5%8C%A0/1568694859705.png" alt="hexo配置git仓库路径"></li><li>部署倒github上</li></ol><pre><code class="javascript">hexo d输入账号密码即可</code></pre><ol start="5"><li>浏览器访问：https://账户名.github.io 访问博客</li></ol><h3 id="四-hexo更换皮肤主题"><a href="#四-hexo更换皮肤主题" class="headerlink" title="四.hexo更换皮肤主题"></a>四.hexo更换皮肤主题</h3><ol><li>hexo官方主题页面：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></li><li>按照主题中的操作步骤依次操作即可完成主题更换</li></ol><h1 id="END-如有问题欢迎交流沟通"><a href="#END-如有问题欢迎交流沟通" class="headerlink" title="END 如有问题欢迎交流沟通"></a>END 如有问题欢迎交流沟通</h1>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 使用简介</title>
      <link href="/2019/09/17/Hexo%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/"/>
      <url>/2019/09/17/Hexo%E4%BD%BF%E7%94%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>!</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
